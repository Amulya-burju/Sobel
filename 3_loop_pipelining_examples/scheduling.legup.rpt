//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 26 09:39:03 2019
//----------------------------------------------------------------------------//

Target Family: StratixIV
Clock period constraint: 6.000000e+00ns
Start Function: main
state: LEGUP_0
   br label %.preheader.i
   Transition: if (start): LEGUP_loop_pipeline_wait_loop_1_1 default: LEGUP_0
state: LEGUP_loop_pipeline_wait_loop_1_1
   %window.2.2.0 = phi i8 [ 0, %0 ], [ %6, %.preheader.i ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %window.2.1.0 = phi i8 [ 0, %0 ], [ %window.2.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %window.1.2.0 = phi i8 [ 0, %0 ], [ %8, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %window.1.1.0 = phi i8 [ 0, %0 ], [ %window.1.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %window.0.2.0 = phi i8 [ 0, %0 ], [ %10, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %window.0.1.0 = phi i8 [ 0, %0 ], [ %window.0.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %prev_prev_row_index.0 = phi i32 [ 0, %0 ], [ %16, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %prev_row_index.0 = phi i32 [ 0, %0 ], [ %14, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %x.013.i = phi i32 [ -1, %0 ], [ %..i, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %y.012.i = phi i32 [ 0, %0 ], [ %3, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %start.011.i = phi i32 [ 0, %0 ], [ %47, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %y_offset.010.i = phi i32 [ -1, %0 ], [ %64, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %x_offset.09.i = phi i32 [ -1, %0 ], [ %65, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   %i.08.i = phi i32 [ 0, %0 ], [ %66, %.preheader.i ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3 (endState: LEGUP_loop_pipeline_wait_loop_1_1)
   br i1 %exitcond5, label %sobel_fast_pipelined.exit, label %.preheader.i, !legup.pipelined !2, !legup.II !2, !legup.totalTime !11, !legup.maxStage !9, !legup.tripCount !12, !legup.label !13, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
   Transition: if (loop_1_pipeline_finish): LEGUP_F_main_BB_sobel_fast_pipelinedexit_2 default: LEGUP_loop_pipeline_wait_loop_1_1
state: LEGUP_F_main_BB_sobel_fast_pipelinedexit_2
   %67 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str4, i32 0, i32 0)) #2 (endState: LEGUP_F_main_BB_sobel_fast_pipelinedexit_2)
   br label %.preheader
   Transition: default: LEGUP_F_main_BB_preheader_3
state: LEGUP_F_main_BB_preheader_3
   %result.04 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %75, %82 ] (endState: LEGUP_F_main_BB_preheader_3)
   %68 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %83, %82 ] (endState: LEGUP_F_main_BB_preheader_3)
   br label %69
   Transition: default: LEGUP_F_main_BB__69_4
state: LEGUP_F_main_BB__69_4
   %result.12 = phi i32 [ %result.04, %.preheader ], [ %75, %80 ] (endState: LEGUP_F_main_BB__69_4)
   %70 = phi i32 [ 0, %.preheader ], [ %81, %80 ] (endState: LEGUP_F_main_BB__69_4)
   %scevgep2 = getelementptr [512 x [512 x i8]]* @output_image, i32 0, i32 %68, i32 %70 (endState: LEGUP_F_main_BB__69_4)
   %scevgep = getelementptr [512 x [512 x i8]]* @elaine_512_golden_output, i32 0, i32 %68, i32 %70 (endState: LEGUP_F_main_BB__69_4)
   %71 = load i8* %scevgep2, align 1, !tbaa !4 (endState: LEGUP_F_main_BB__69_5)
   %72 = load i8* %scevgep, align 1, !tbaa !4 (endState: LEGUP_F_main_BB__69_5)
   Transition: default: LEGUP_F_main_BB__69_5
state: LEGUP_F_main_BB__69_5
   %73 = icmp eq i8 %71, %72 (endState: LEGUP_F_main_BB__69_5)
   %74 = zext i1 %73 to i32 (endState: LEGUP_F_main_BB__69_5)
   %75 = add nsw i32 %74, %result.12 (endState: LEGUP_F_main_BB__69_5)
   br i1 %73, label %80, label %76
   Transition: if (%73): LEGUP_F_main_BB__80_7 default: LEGUP_F_main_BB__76_6
state: LEGUP_F_main_BB__76_6
   %77 = zext i8 %71 to i32 (endState: LEGUP_F_main_BB__76_6)
   %78 = zext i8 %72 to i32 (endState: LEGUP_F_main_BB__76_6)
   %79 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([53 x i8]* @.str5, i32 0, i32 0), i32 %68, i32 %70, i32 %77, i32 %78) #2 (endState: LEGUP_F_main_BB__76_6)
   br label %80
   Transition: default: LEGUP_F_main_BB__80_7
state: LEGUP_F_main_BB__80_7
   %81 = add nsw i32 %70, 1 (endState: LEGUP_F_main_BB__80_7)
   %exitcond1 = icmp eq i32 %81, 512 (endState: LEGUP_F_main_BB__80_7)
   br i1 %exitcond1, label %82, label %69
   Transition: if (%exitcond1): LEGUP_F_main_BB__82_8 default: LEGUP_F_main_BB__69_4
state: LEGUP_F_main_BB__82_8
   %83 = add nsw i32 %68, 1 (endState: LEGUP_F_main_BB__82_8)
   %exitcond = icmp eq i32 %83, 512 (endState: LEGUP_F_main_BB__82_8)
   br i1 %exitcond, label %84, label %.preheader
   Transition: if (%exitcond): LEGUP_F_main_BB__84_9 default: LEGUP_F_main_BB_preheader_3
state: LEGUP_F_main_BB__84_9
   %85 = icmp eq i32 %75, 262144 (endState: LEGUP_F_main_BB__84_9)
   br i1 %85, label %86, label %88
   Transition: if (%85): LEGUP_F_main_BB__86_10 default: LEGUP_F_main_BB__88_11
state: LEGUP_F_main_BB__86_10
   %87 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str6, i32 0, i32 0)) #2 (endState: LEGUP_F_main_BB__86_10)
   br label %91
   Transition: default: LEGUP_F_main_BB__91_12
state: LEGUP_F_main_BB__88_11
   %89 = sub nsw i32 262144, %75 (endState: LEGUP_F_main_BB__88_11)
   %90 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str7, i32 0, i32 0), i32 %89) #2 (endState: LEGUP_F_main_BB__88_11)
   br label %91
   Transition: default: LEGUP_F_main_BB__91_12
state: LEGUP_F_main_BB__91_12
   ret i32 %75
   Transition: default: LEGUP_0

Basic Block: %.preheader.i Num States: 1
Basic Block: %sobel_fast_pipelined.exit Num States: 1
Basic Block: %.preheader Num States: 1
Basic Block: %69 Num States: 2
Basic Block: %76 Num States: 1
Basic Block: %80 Num States: 1
Basic Block: %82 Num States: 1
Basic Block: %84 Num States: 1
Basic Block: %86 Num States: 1
Basic Block: %88 Num States: 1
Basic Block: %91 Num States: 1
Basic Block: %0 Num States: 1
End Function: main
--------------------------------------------------------------------------------

