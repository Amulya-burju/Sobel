//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 26 09:39:04 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_loop_pipeline_wait_loop_1_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_sobel_fast_pipelinedexit_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB_preheader_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB__69_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB__69_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB__76_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB__80_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB__82_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB__84_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB__86_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB__88_11 = 4'd11;
parameter [3:0] LEGUP_F_main_BB__91_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [7:0] main_preheaderi_window220;
reg [7:0] main_preheaderi_window220_reg;
reg [7:0] main_preheaderi_window210;
reg [7:0] main_preheaderi_window210_reg;
reg [7:0] main_preheaderi_window120;
reg [7:0] main_preheaderi_window120_reg;
reg [7:0] main_preheaderi_window110;
reg [7:0] main_preheaderi_window110_reg;
reg [7:0] main_preheaderi_window020;
reg [7:0] main_preheaderi_window020_reg;
reg [7:0] main_preheaderi_window010;
reg [7:0] main_preheaderi_window010_reg;
reg [31:0] main_preheaderi_prev_prev_row_index0;
reg [31:0] main_preheaderi_prev_prev_row_index0_reg;
reg [31:0] main_preheaderi_prev_row_index0;
reg [31:0] main_preheaderi_prev_row_index0_reg;
reg [31:0] main_preheaderi_x013i;
reg [31:0] main_preheaderi_x013i_reg;
reg [31:0] main_preheaderi_y012i;
reg [31:0] main_preheaderi_y012i_reg;
reg [31:0] main_preheaderi_start011i;
reg [31:0] main_preheaderi_start011i_reg;
reg [31:0] main_preheaderi_y_offset010i;
reg [31:0] main_preheaderi_y_offset010i_reg;
reg [31:0] main_preheaderi_x_offset09i;
reg [31:0] main_preheaderi_x_offset09i_reg;
reg [31:0] main_preheaderi_i08i;
reg [31:0] main_preheaderi_i08i_reg;
reg  main_preheaderi_1;
reg  main_preheaderi_1_reg;
reg [31:0] main_preheaderi_2;
reg [31:0] main_preheaderi_2_reg;
reg [31:0] main_preheaderi_3;
reg [31:0] main_preheaderi_3_reg;
reg [31:0] main_preheaderi_4;
reg [31:0] main_preheaderi_4_reg;
reg [31:0] main_preheaderi_i;
reg [31:0] main_preheaderi_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_5_reg;
reg [7:0] main_preheaderi_6;
reg [7:0] main_preheaderi_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_7_reg;
reg [7:0] main_preheaderi_8;
reg [7:0] main_preheaderi_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_9_reg;
reg [7:0] main_preheaderi_10;
reg [7:0] main_preheaderi_10_reg;
reg [31:0] main_preheaderi_11;
reg [31:0] main_preheaderi_11_reg;
reg [31:0] main_preheaderi_12;
reg [31:0] main_preheaderi_12_reg;
reg  main_preheaderi_13;
reg  main_preheaderi_13_reg;
reg [31:0] main_preheaderi_14;
reg [31:0] main_preheaderi_14_reg;
reg  main_preheaderi_15;
reg  main_preheaderi_15_reg;
reg [31:0] main_preheaderi_16;
reg [31:0] main_preheaderi_16_reg;
reg  main_preheaderi_17;
reg  main_preheaderi_17_reg;
reg  main_preheaderi_18;
reg  main_preheaderi_18_reg;
reg  main_preheaderi_19;
reg  main_preheaderi_19_reg;
reg [31:0] main_preheaderi_20;
reg [31:0] main_preheaderi_20_reg;
reg [31:0] main_preheaderi_21;
reg [31:0] main_preheaderi_21_reg;
reg  main_preheaderi_22;
reg  main_preheaderi_22_reg;
reg [31:0] main_preheaderi_yoffii;
reg [31:0] main_preheaderi_yoffii_reg;
reg  main_preheaderi_phitmpii;
reg  main_preheaderi_phitmpii_reg;
reg  main_preheaderi_notlhsii;
reg  main_preheaderi_notlhsii_reg;
reg  main_preheaderi_notrhsii;
reg  main_preheaderi_notrhsii_reg;
reg  main_preheaderi_notorcond3ii;
reg  main_preheaderi_notorcond3ii_reg;
reg  main_preheaderi_phitmpii_var0;
reg  main_preheaderi_phitmpii_var0_reg;
reg [31:0] main_preheaderi_23;
reg [31:0] main_preheaderi_23_reg;
reg [31:0] main_preheaderi_24;
reg [31:0] main_preheaderi_24_reg;
reg [31:0] main_preheaderi_25;
reg [31:0] main_preheaderi_25_reg;
reg [31:0] main_preheaderi_26;
reg [31:0] main_preheaderi_26_reg;
reg [31:0] main_preheaderi_27;
reg [31:0] main_preheaderi_27_reg;
reg [31:0] main_preheaderi_28;
reg [31:0] main_preheaderi_28_reg;
reg [31:0] main_preheaderi_29;
reg [31:0] main_preheaderi_29_reg;
reg [31:0] main_preheaderi_30;
reg [31:0] main_preheaderi_30_reg;
reg [31:0] main_preheaderi_31;
reg [31:0] main_preheaderi_31_reg;
reg [31:0] main_preheaderi_32;
reg [31:0] main_preheaderi_32_reg;
reg [31:0] main_preheaderi_33;
reg [31:0] main_preheaderi_33_reg;
reg [31:0] main_preheaderi_34;
reg [31:0] main_preheaderi_34_reg;
reg [31:0] main_preheaderi_35;
reg [31:0] main_preheaderi_35_reg;
reg [31:0] main_preheaderi_36;
reg [31:0] main_preheaderi_36_reg;
reg [31:0] main_preheaderi_37;
reg [31:0] main_preheaderi_37_reg;
reg [31:0] main_preheaderi_38;
reg [31:0] main_preheaderi_38_reg;
reg [31:0] main_preheaderi_39;
reg [31:0] main_preheaderi_39_reg;
reg [31:0] main_preheaderi_40;
reg [31:0] main_preheaderi_40_reg;
reg [31:0] main_preheaderi_41;
reg [31:0] main_preheaderi_41_reg;
reg [31:0] main_preheaderi_42;
reg [31:0] main_preheaderi_42_reg;
reg [31:0] main_preheaderi_43;
reg [31:0] main_preheaderi_43_reg;
reg [31:0] main_preheaderi_44;
reg [31:0] main_preheaderi_44_reg;
reg [31:0] main_preheaderi_45;
reg [31:0] main_preheaderi_45_reg;
reg [31:0] main_preheaderi_46;
reg [31:0] main_preheaderi_46_reg;
reg [31:0] main_preheaderi_47;
reg [31:0] main_preheaderi_47_reg;
reg  main_preheaderi_48;
reg  main_preheaderi_48_reg;
reg  main_preheaderi_49;
reg  main_preheaderi_49_reg;
reg [31:0] main_preheaderi_50;
reg [31:0] main_preheaderi_50_reg;
reg  main_preheaderi_51;
reg  main_preheaderi_51_reg;
reg  main_preheaderi_52;
reg  main_preheaderi_52_reg;
reg [31:0] main_preheaderi_53;
reg [31:0] main_preheaderi_53_reg;
reg  main_preheaderi_54;
reg  main_preheaderi_54_reg;
reg [31:0] main_preheaderi_opi;
reg [31:0] main_preheaderi_opi_reg;
reg [31:0] main_preheaderi_i1negi;
reg [31:0] main_preheaderi_i1negi_reg;
reg [31:0] main_preheaderi_op14opi;
reg [31:0] main_preheaderi_op14opi_reg;
reg [31:0] main_preheaderi_negi;
reg [31:0] main_preheaderi_negi_reg;
reg [31:0] main_preheaderi_55;
reg [31:0] main_preheaderi_55_reg;
reg [31:0] main_preheaderi_56;
reg [31:0] main_preheaderi_56_reg;
reg  main_preheaderi_57;
reg  main_preheaderi_57_reg;
reg [7:0] main_preheaderi_58;
reg [7:0] main_preheaderi_58_reg;
reg [7:0] main_preheaderi_59;
reg [7:0] main_preheaderi_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_60_reg;
reg [31:0] main_preheaderi_61;
reg [31:0] main_preheaderi_61_reg;
reg  main_preheaderi_62;
reg  main_preheaderi_62_reg;
reg [31:0] main_preheaderi_63;
reg [31:0] main_preheaderi_63_reg;
reg [31:0] main_preheaderi_64;
reg [31:0] main_preheaderi_64_reg;
reg [31:0] main_preheaderi_65;
reg [31:0] main_preheaderi_65_reg;
reg [31:0] main_preheaderi_66;
reg [31:0] main_preheaderi_66_reg;
reg  main_preheaderi_exitcond5;
reg  main_preheaderi_exitcond5_reg;
reg [31:0] main_preheader_result04;
reg [31:0] main_preheader_result04_reg;
reg [31:0] main_preheader_68;
reg [31:0] main_preheader_68_reg;
reg [31:0] main_69_result12;
reg [31:0] main_69_result12_reg;
reg [31:0] main_69_70;
reg [31:0] main_69_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_scevgep_reg;
reg [7:0] main_69_71;
reg [7:0] main_69_71_reg;
reg [7:0] main_69_72;
reg [7:0] main_69_72_reg;
reg  main_69_73;
reg  main_69_73_reg;
reg [31:0] main_69_74;
reg [31:0] main_69_74_reg;
reg [31:0] main_69_75;
reg [31:0] main_69_75_reg;
reg [31:0] main_76_77;
reg [31:0] main_76_77_reg;
reg [31:0] main_76_78;
reg [31:0] main_76_78_reg;
reg [31:0] main_80_81;
reg [31:0] main_80_81_reg;
reg  main_80_exitcond1;
reg  main_80_exitcond1_reg;
reg [31:0] main_82_83;
reg [31:0] main_82_83_reg;
reg  main_82_exitcond;
reg  main_82_exitcond_reg;
reg  main_84_85;
reg  main_84_85_reg;
reg [31:0] main_88_89;
reg [31:0] main_88_89_reg;
reg [17:0] elaine_512_input_address_a;
reg  elaine_512_input_write_enable_a;
wire [7:0] elaine_512_input_in_a;
wire [7:0] elaine_512_input_out_a;
wire [17:0] elaine_512_input_address_b;
wire  elaine_512_input_write_enable_b;
wire [7:0] elaine_512_input_in_b;
wire [7:0] elaine_512_input_out_b;
reg [17:0] elaine_512_golden_output_address_a;
reg  elaine_512_golden_output_write_enable_a;
wire [7:0] elaine_512_golden_output_in_a;
wire [7:0] elaine_512_golden_output_out_a;
wire [17:0] elaine_512_golden_output_address_b;
wire  elaine_512_golden_output_write_enable_b;
wire [7:0] elaine_512_golden_output_in_b;
wire [7:0] elaine_512_golden_output_out_b;
reg [17:0] output_image_address_a;
reg  output_image_write_enable_a;
reg [7:0] output_image_in_a;
wire [7:0] output_image_out_a;
wire [17:0] output_image_address_b;
wire  output_image_write_enable_b;
wire [7:0] output_image_in_b;
wire [7:0] output_image_out_b;
reg [8:0] prev_row_address_a;
reg  prev_row_write_enable_a;
wire [7:0] prev_row_in_a;
wire [7:0] prev_row_out_a;
reg [8:0] prev_row_address_b;
reg  prev_row_write_enable_b;
reg [7:0] prev_row_in_b;
wire [7:0] prev_row_out_b;
reg [8:0] prev_prev_row_address_a;
reg  prev_prev_row_write_enable_a;
wire [7:0] prev_prev_row_in_a;
wire [7:0] prev_prev_row_out_a;
reg [8:0] prev_prev_row_address_b;
reg  prev_prev_row_write_enable_b;
reg [7:0] prev_prev_row_in_b;
wire [7:0] prev_prev_row_out_b;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg  loop_1_ii_state;
reg [31:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg  loop_1_valid_bit_3;
reg  loop_1_valid_bit_4;
reg  loop_1_valid_bit_5;
reg [31:0] loop_1_i_stage1;
reg [31:0] loop_1_i_stage2;
reg [31:0] loop_1_i_stage3;
reg [31:0] loop_1_i_stage4;
reg [31:0] main_preheaderi_3_reg_stage1;
reg [31:0] main_preheaderi_i_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_7_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_7_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_9_reg_stage1;
reg [31:0] main_preheaderi_20_reg_stage1;
reg [31:0] main_preheaderi_21_reg_stage1;
reg [31:0] main_preheaderi_24_reg_stage1;
reg [31:0] main_preheaderi_27_reg_stage1;
reg [31:0] main_preheaderi_32_reg_stage1;
reg [31:0] main_preheaderi_36_reg_stage2;
reg [31:0] main_preheaderi_37_reg_stage1;
reg [31:0] main_preheaderi_37_reg_stage2;
reg [31:0] main_preheaderi_42_reg_stage2;
reg [31:0] main_preheaderi_45_reg_stage3;
reg [31:0] main_preheaderi_47_reg_stage1;
reg [31:0] main_preheaderi_50_reg_stage3;
reg  main_preheaderi_52_reg_stage3;
reg  main_preheaderi_54_reg_stage4;
reg [31:0] main_preheaderi_i1negi_reg_stage4;
reg [31:0] main_preheaderi_op14opi_reg_stage4;
reg  main_preheaderi_57_reg_stage2;
reg  main_preheaderi_57_reg_stage3;
reg  main_preheaderi_57_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_60_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_60_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_60_reg_stage4;
reg [31:0] main_preheaderi_61_reg_stage1;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;

// Local Rams


// @elaine_512_input = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] c"\BE\BE\BE\BE\BE\C0\C0\C0\C0\C0\BC\BC\BC\BC\BC\B7\B7\B7\B7\B7\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B7\B7\B7\B7\B7\B4\B4\B4\B...
rom_dual_port elaine_512_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( elaine_512_input_address_a ),
	.address_b( elaine_512_input_address_b ),
	.q_a( elaine_512_input_out_a ),
	.q_b( elaine_512_input_out_b)
);
defparam elaine_512_input.width_a = 8;
defparam elaine_512_input.width_b = 8;
defparam elaine_512_input.widthad_a = 18;
defparam elaine_512_input.widthad_b = 18;
defparam elaine_512_input.numwords_a = 262144;
defparam elaine_512_input.numwords_b = 262144;
defparam elaine_512_input.latency = 1;
defparam elaine_512_input.init_file = "elaine_512_input.mif";


// @elaine_512_golden_output = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] zeroinitializer, [512 x i8] c"\00\FF\FF\FF\FF\FF\FF\FF\FF\EF\EF\FF\FF\FF\EB\EB\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\F...
rom_dual_port elaine_512_golden_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( elaine_512_golden_output_address_a ),
	.address_b( elaine_512_golden_output_address_b ),
	.q_a( elaine_512_golden_output_out_a ),
	.q_b( elaine_512_golden_output_out_b)
);
defparam elaine_512_golden_output.width_a = 8;
defparam elaine_512_golden_output.width_b = 8;
defparam elaine_512_golden_output.widthad_a = 18;
defparam elaine_512_golden_output.widthad_b = 18;
defparam elaine_512_golden_output.numwords_a = 262144;
defparam elaine_512_golden_output.numwords_b = 262144;
defparam elaine_512_golden_output.latency = 1;
defparam elaine_512_golden_output.init_file = "elaine_512_golden_output.mif";


// @output_image = internal unnamed_addr global [512 x [512 x i8]] zeroinitializer, align 1
ram_dual_port output_image (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( output_image_address_a ),
	.address_b( output_image_address_b ),
	.wren_a( output_image_write_enable_a ),
	.wren_b( output_image_write_enable_b ),
	.data_a( output_image_in_a ),
	.data_b( output_image_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( output_image_out_a ),
	.q_b( output_image_out_b)
);
defparam output_image.width_a = 8;
defparam output_image.width_b = 8;
defparam output_image.widthad_a = 18;
defparam output_image.widthad_b = 18;
defparam output_image.width_be_a = 1;
defparam output_image.width_be_b = 1;
defparam output_image.numwords_a = 262144;
defparam output_image.numwords_b = 262144;
defparam output_image.latency = 1;
defparam output_image.init_file = "output_image.mif";


// @prev_row = internal unnamed_addr global [512 x i8] zeroinitializer, align 1
ram_dual_port prev_row (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( prev_row_address_a ),
	.address_b( prev_row_address_b ),
	.wren_a( prev_row_write_enable_a ),
	.wren_b( prev_row_write_enable_b ),
	.data_a( prev_row_in_a ),
	.data_b( prev_row_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( prev_row_out_a ),
	.q_b( prev_row_out_b)
);
defparam prev_row.width_a = 8;
defparam prev_row.width_b = 8;
defparam prev_row.widthad_a = 9;
defparam prev_row.widthad_b = 9;
defparam prev_row.width_be_a = 1;
defparam prev_row.width_be_b = 1;
defparam prev_row.numwords_a = 512;
defparam prev_row.numwords_b = 512;
defparam prev_row.latency = 1;
defparam prev_row.init_file = "prev_row.mif";


// @prev_prev_row = internal unnamed_addr global [512 x i8] zeroinitializer, align 1
ram_dual_port prev_prev_row (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( prev_prev_row_address_a ),
	.address_b( prev_prev_row_address_b ),
	.wren_a( prev_prev_row_write_enable_a ),
	.wren_b( prev_prev_row_write_enable_b ),
	.data_a( prev_prev_row_in_a ),
	.data_b( prev_prev_row_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( prev_prev_row_out_a ),
	.q_b( prev_prev_row_out_b)
);
defparam prev_prev_row.width_a = 8;
defparam prev_prev_row.width_b = 8;
defparam prev_prev_row.widthad_a = 9;
defparam prev_prev_row.widthad_b = 9;
defparam prev_prev_row.width_be_a = 1;
defparam prev_prev_row.width_be_b = 1;
defparam prev_prev_row.numwords_a = 512;
defparam prev_prev_row.numwords_b = 512;
defparam prev_prev_row.latency = 1;
defparam prev_prev_row.init_file = "prev_prev_row.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sobel_fast_pipelined.exit*/
	/*   %67 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str4, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_sobel_fast_pipelinedexit_2)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("Done pipeline\n");
	end
	/* main: %76*/
	/*   %79 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([53 x i8]* @.str5, i32 0, i32 0), i32 %68, i32 %70, i32 %77, i32 %78) #2*/
	if ((cur_state == LEGUP_F_main_BB__76_6)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("y=%d ; x=%d --> output_image != golden --> %d != %d\n", $signed(main_preheader_68_reg), $signed(main_69_70_reg), $signed(main_76_77), $signed(main_76_78));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_68_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_69_70_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_76_77) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_76_78) === 1'bX) finish <= 0;
	end
	/* main: %86*/
	/*   %87 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str6, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__86_10)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("PASS!\n");
	end
	/* main: %88*/
	/*   %90 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str7, i32 0, i32 0), i32 %89) #2*/
	if ((cur_state == LEGUP_F_main_BB__88_11)) begin
		$write("Cycle: %d Time: %d    ", ($time-50)/20, $time);
$write("FAIL with %d differences\n", $signed(main_88_89));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_88_89) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop_1_1;
LEGUP_F_main_BB__69_4:
		next_state = LEGUP_F_main_BB__69_5;
LEGUP_F_main_BB__69_5:
	if ((main_69_73 == 1'd1))
		next_state = LEGUP_F_main_BB__80_7;
	else if ((main_69_73 == 1'd0))
		next_state = LEGUP_F_main_BB__76_6;
LEGUP_F_main_BB__76_6:
		next_state = LEGUP_F_main_BB__80_7;
LEGUP_F_main_BB__80_7:
	if ((main_80_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__82_8;
	else if ((main_80_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__69_4;
LEGUP_F_main_BB__82_8:
	if ((main_82_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__84_9;
	else if ((main_82_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_3;
LEGUP_F_main_BB__84_9:
	if ((main_84_85 == 1'd1))
		next_state = LEGUP_F_main_BB__86_10;
	else if ((main_84_85 == 1'd0))
		next_state = LEGUP_F_main_BB__88_11;
LEGUP_F_main_BB__86_10:
		next_state = LEGUP_F_main_BB__91_12;
LEGUP_F_main_BB__88_11:
		next_state = LEGUP_F_main_BB__91_12;
LEGUP_F_main_BB__91_12:
		next_state = LEGUP_0;
LEGUP_F_main_BB_preheader_3:
		next_state = LEGUP_F_main_BB__69_4;
LEGUP_F_main_BB_sobel_fast_pipelinedexit_2:
		next_state = LEGUP_F_main_BB_preheader_3;
LEGUP_loop_pipeline_wait_loop_1_1:
	if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB_sobel_fast_pipelinedexit_2;
	else if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB_sobel_fast_pipelinedexit_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.2.2.0 = phi i8 [ 0, %0 ], [ %6, %.preheader.i ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_window220 = main_preheaderi_6;
	end
	/* main: %.preheader.i*/
	/*   %window.2.2.0 = phi i8 [ 0, %0 ], [ %6, %.preheader.i ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window220 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.2.2.0 = phi i8 [ 0, %0 ], [ %6, %.preheader.i ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_window220_reg <= main_preheaderi_window220;
		if (start == 1'b0 && ^(main_preheaderi_window220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window220_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.2.2.0 = phi i8 [ 0, %0 ], [ %6, %.preheader.i ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window220_reg <= main_preheaderi_window220;
		if (start == 1'b0 && ^(main_preheaderi_window220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.2.1.0 = phi i8 [ 0, %0 ], [ %window.2.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window210 = main_preheaderi_window220;
	end
	/* main: %.preheader.i*/
	/*   %window.2.1.0 = phi i8 [ 0, %0 ], [ %window.2.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window210 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.2.1.0 = phi i8 [ 0, %0 ], [ %window.2.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window210_reg <= main_preheaderi_window210;
		if (start == 1'b0 && ^(main_preheaderi_window210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window210_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.2.1.0 = phi i8 [ 0, %0 ], [ %window.2.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window210_reg <= main_preheaderi_window210;
		if (start == 1'b0 && ^(main_preheaderi_window210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.1.2.0 = phi i8 [ 0, %0 ], [ %8, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window120 = main_preheaderi_8;
	end
	/* main: %.preheader.i*/
	/*   %window.1.2.0 = phi i8 [ 0, %0 ], [ %8, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window120 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.1.2.0 = phi i8 [ 0, %0 ], [ %8, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window120_reg <= main_preheaderi_window120;
		if (start == 1'b0 && ^(main_preheaderi_window120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window120_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.1.2.0 = phi i8 [ 0, %0 ], [ %8, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window120_reg <= main_preheaderi_window120;
		if (start == 1'b0 && ^(main_preheaderi_window120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.1.1.0 = phi i8 [ 0, %0 ], [ %window.1.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_window110 = main_preheaderi_window120;
	end
	/* main: %.preheader.i*/
	/*   %window.1.1.0 = phi i8 [ 0, %0 ], [ %window.1.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window110 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.1.1.0 = phi i8 [ 0, %0 ], [ %window.1.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_window110_reg <= main_preheaderi_window110;
		if (start == 1'b0 && ^(main_preheaderi_window110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window110_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.1.1.0 = phi i8 [ 0, %0 ], [ %window.1.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window110_reg <= main_preheaderi_window110;
		if (start == 1'b0 && ^(main_preheaderi_window110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.0.2.0 = phi i8 [ 0, %0 ], [ %10, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window020 = main_preheaderi_10;
	end
	/* main: %.preheader.i*/
	/*   %window.0.2.0 = phi i8 [ 0, %0 ], [ %10, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window020 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.0.2.0 = phi i8 [ 0, %0 ], [ %10, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_window020_reg <= main_preheaderi_window020;
		if (start == 1'b0 && ^(main_preheaderi_window020) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window020_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.0.2.0 = phi i8 [ 0, %0 ], [ %10, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window020_reg <= main_preheaderi_window020;
		if (start == 1'b0 && ^(main_preheaderi_window020) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window020_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %window.0.1.0 = phi i8 [ 0, %0 ], [ %window.0.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_window010 = main_preheaderi_window020;
	end
	/* main: %.preheader.i*/
	/*   %window.0.1.0 = phi i8 [ 0, %0 ], [ %window.0.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_window010 = 8'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %window.0.1.0 = phi i8 [ 0, %0 ], [ %window.0.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_window010_reg <= main_preheaderi_window010;
		if (start == 1'b0 && ^(main_preheaderi_window010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window010_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %window.0.1.0 = phi i8 [ 0, %0 ], [ %window.0.2.0, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_window010_reg <= main_preheaderi_window010;
		if (start == 1'b0 && ^(main_preheaderi_window010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_window010_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %prev_prev_row_index.0 = phi i32 [ 0, %0 ], [ %16, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_prev_prev_row_index0 = main_preheaderi_16;
	end
	/* main: %.preheader.i*/
	/*   %prev_prev_row_index.0 = phi i32 [ 0, %0 ], [ %16, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_prev_prev_row_index0 = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %prev_prev_row_index.0 = phi i32 [ 0, %0 ], [ %16, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_prev_prev_row_index0_reg <= main_preheaderi_prev_prev_row_index0;
		if (start == 1'b0 && ^(main_preheaderi_prev_prev_row_index0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_prev_prev_row_index0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %prev_prev_row_index.0 = phi i32 [ 0, %0 ], [ %16, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_prev_prev_row_index0_reg <= main_preheaderi_prev_prev_row_index0;
		if (start == 1'b0 && ^(main_preheaderi_prev_prev_row_index0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_prev_prev_row_index0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %prev_row_index.0 = phi i32 [ 0, %0 ], [ %14, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_prev_row_index0 = main_preheaderi_14;
	end
	/* main: %.preheader.i*/
	/*   %prev_row_index.0 = phi i32 [ 0, %0 ], [ %14, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_prev_row_index0 = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %prev_row_index.0 = phi i32 [ 0, %0 ], [ %14, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_prev_row_index0_reg <= main_preheaderi_prev_row_index0;
		if (start == 1'b0 && ^(main_preheaderi_prev_row_index0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_prev_row_index0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %prev_row_index.0 = phi i32 [ 0, %0 ], [ %14, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_prev_row_index0_reg <= main_preheaderi_prev_row_index0;
		if (start == 1'b0 && ^(main_preheaderi_prev_row_index0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_prev_row_index0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %x.013.i = phi i32 [ -1, %0 ], [ %..i, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_x013i = main_preheaderi_i;
	end
	/* main: %.preheader.i*/
	/*   %x.013.i = phi i32 [ -1, %0 ], [ %..i, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_x013i = -32'd1;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %x.013.i = phi i32 [ -1, %0 ], [ %..i, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_x013i_reg <= main_preheaderi_x013i;
		if (start == 1'b0 && ^(main_preheaderi_x013i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_x013i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %x.013.i = phi i32 [ -1, %0 ], [ %..i, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_x013i_reg <= main_preheaderi_x013i;
		if (start == 1'b0 && ^(main_preheaderi_x013i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_x013i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %y.012.i = phi i32 [ 0, %0 ], [ %3, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_y012i = main_preheaderi_3;
	end
	/* main: %.preheader.i*/
	/*   %y.012.i = phi i32 [ 0, %0 ], [ %3, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_y012i = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %y.012.i = phi i32 [ 0, %0 ], [ %3, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_y012i_reg <= main_preheaderi_y012i;
		if (start == 1'b0 && ^(main_preheaderi_y012i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_y012i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %y.012.i = phi i32 [ 0, %0 ], [ %3, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_y012i_reg <= main_preheaderi_y012i;
		if (start == 1'b0 && ^(main_preheaderi_y012i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_y012i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %start.011.i = phi i32 [ 0, %0 ], [ %47, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_start011i = main_preheaderi_47;
	end
	/* main: %.preheader.i*/
	/*   %start.011.i = phi i32 [ 0, %0 ], [ %47, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_start011i = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %start.011.i = phi i32 [ 0, %0 ], [ %47, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_start011i_reg <= main_preheaderi_start011i;
		if (start == 1'b0 && ^(main_preheaderi_start011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_start011i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %start.011.i = phi i32 [ 0, %0 ], [ %47, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_start011i_reg <= main_preheaderi_start011i;
		if (start == 1'b0 && ^(main_preheaderi_start011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_start011i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %y_offset.010.i = phi i32 [ -1, %0 ], [ %64, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_y_offset010i = main_preheaderi_64;
	end
	/* main: %.preheader.i*/
	/*   %y_offset.010.i = phi i32 [ -1, %0 ], [ %64, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_y_offset010i = -32'd1;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %y_offset.010.i = phi i32 [ -1, %0 ], [ %64, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_y_offset010i_reg <= main_preheaderi_y_offset010i;
		if (start == 1'b0 && ^(main_preheaderi_y_offset010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_y_offset010i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %y_offset.010.i = phi i32 [ -1, %0 ], [ %64, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_y_offset010i_reg <= main_preheaderi_y_offset010i;
		if (start == 1'b0 && ^(main_preheaderi_y_offset010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_y_offset010i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %x_offset.09.i = phi i32 [ -1, %0 ], [ %65, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_x_offset09i = main_preheaderi_65;
	end
	/* main: %.preheader.i*/
	/*   %x_offset.09.i = phi i32 [ -1, %0 ], [ %65, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_preheaderi_x_offset09i = -32'd1;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %x_offset.09.i = phi i32 [ -1, %0 ], [ %65, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_x_offset09i_reg <= main_preheaderi_x_offset09i;
		if (start == 1'b0 && ^(main_preheaderi_x_offset09i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_x_offset09i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %x_offset.09.i = phi i32 [ -1, %0 ], [ %65, %.preheader.i ], !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_x_offset09i_reg <= main_preheaderi_x_offset09i;
		if (start == 1'b0 && ^(main_preheaderi_x_offset09i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_x_offset09i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.08.i = phi i32 [ 0, %0 ], [ %66, %.preheader.i ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
if (reset) begin main_preheaderi_i08i = 0; end
		main_preheaderi_i08i = 32'd0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.08.i = phi i32 [ 0, %0 ], [ %66, %.preheader.i ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_preheaderi_i08i_reg <= main_preheaderi_i08i;
		if (start == 1'b0 && ^(main_preheaderi_i08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i08i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %1 = icmp eq i32 %x.013.i, 511, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_1 = (main_preheaderi_x013i_reg == 32'd511);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %1 = icmp eq i32 %x.013.i, 511, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_1_reg <= main_preheaderi_1;
		if (start == 1'b0 && ^(main_preheaderi_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %2 = zext i1 %1 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_2 = main_preheaderi_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %2 = zext i1 %1 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_2_reg <= main_preheaderi_2;
		if (start == 1'b0 && ^(main_preheaderi_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %3 = add nsw i32 %2, %y.012.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_3 = (main_preheaderi_2 + main_preheaderi_y012i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %3 = add nsw i32 %2, %y.012.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_3_reg <= main_preheaderi_3;
		if (start == 1'b0 && ^(main_preheaderi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %4 = add nsw i32 %x.013.i, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_4 = (main_preheaderi_x013i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %4 = add nsw i32 %x.013.i, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_4_reg <= main_preheaderi_4;
		if (start == 1'b0 && ^(main_preheaderi_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i = select i1 %1, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_i = (main_preheaderi_1 ? 32'd0 : main_preheaderi_4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i = select i1 %1, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_i_reg <= main_preheaderi_i;
		if (start == 1'b0 && ^(main_preheaderi_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %5 = getelementptr inbounds [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %3, i32 %..i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_5 = (1'd0 + ((512 * main_preheaderi_3_reg_stage1) + (1 * main_preheaderi_i_reg_stage1)));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %5 = getelementptr inbounds [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %3, i32 %..i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_5_reg <= main_preheaderi_5;
		if (start == 1'b0 && ^(main_preheaderi_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %6 = load i8* %5, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_6 = elaine_512_input_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %6 = load i8* %5, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_6_reg <= main_preheaderi_6;
		if (start == 1'b0 && ^(main_preheaderi_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %7 = getelementptr inbounds [512 x i8]* @prev_row, i32 0, i32 %prev_row_index.0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_7 = (1'd0 + (1 * main_preheaderi_prev_row_index0_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %7 = getelementptr inbounds [512 x i8]* @prev_row, i32 0, i32 %prev_row_index.0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_7_reg <= main_preheaderi_7;
		if (start == 1'b0 && ^(main_preheaderi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %8 = load i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_8 = prev_row_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %8 = load i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_8_reg <= main_preheaderi_8;
		if (start == 1'b0 && ^(main_preheaderi_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %9 = getelementptr inbounds [512 x i8]* @prev_prev_row, i32 0, i32 %prev_prev_row_index.0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_9 = (1'd0 + (1 * main_preheaderi_prev_prev_row_index0_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %9 = getelementptr inbounds [512 x i8]* @prev_prev_row, i32 0, i32 %prev_prev_row_index.0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_9_reg <= main_preheaderi_9;
		if (start == 1'b0 && ^(main_preheaderi_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %10 = load i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_10 = prev_prev_row_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %10 = load i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_10_reg <= main_preheaderi_10;
		if (start == 1'b0 && ^(main_preheaderi_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %11 = add nsw i32 %prev_row_index.0, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_11 = (main_preheaderi_prev_row_index0_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %11 = add nsw i32 %prev_row_index.0, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_11_reg <= main_preheaderi_11;
		if (start == 1'b0 && ^(main_preheaderi_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %12 = add nsw i32 %prev_prev_row_index.0, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_12 = (main_preheaderi_prev_prev_row_index0_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %12 = add nsw i32 %prev_prev_row_index.0, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_12_reg <= main_preheaderi_12;
		if (start == 1'b0 && ^(main_preheaderi_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %13 = icmp eq i32 %11, 512, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_13 = (main_preheaderi_11 == 32'd512);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %13 = icmp eq i32 %11, 512, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_13_reg <= main_preheaderi_13;
		if (start == 1'b0 && ^(main_preheaderi_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %14 = select i1 %13, i32 0, i32 %11, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_14 = (main_preheaderi_13 ? 32'd0 : main_preheaderi_11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %14 = select i1 %13, i32 0, i32 %11, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_14_reg <= main_preheaderi_14;
		if (start == 1'b0 && ^(main_preheaderi_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %15 = icmp eq i32 %12, 512, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_15 = (main_preheaderi_12 == 32'd512);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %15 = icmp eq i32 %12, 512, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_15_reg <= main_preheaderi_15;
		if (start == 1'b0 && ^(main_preheaderi_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %16 = select i1 %15, i32 0, i32 %12, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_16 = (main_preheaderi_15 ? 32'd0 : main_preheaderi_12);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %16 = select i1 %15, i32 0, i32 %12, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_16_reg <= main_preheaderi_16;
		if (start == 1'b0 && ^(main_preheaderi_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %17 = icmp eq i32 %3, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_17 = (main_preheaderi_3 == 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %17 = icmp eq i32 %3, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_17_reg <= main_preheaderi_17;
		if (start == 1'b0 && ^(main_preheaderi_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %18 = icmp eq i32 %..i, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_18 = (main_preheaderi_i == 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %18 = icmp eq i32 %..i, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_18_reg <= main_preheaderi_18;
		if (start == 1'b0 && ^(main_preheaderi_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %19 = and i1 %17, %18, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_19 = (main_preheaderi_17 & main_preheaderi_18);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %19 = and i1 %17, %18, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_19_reg <= main_preheaderi_19;
		if (start == 1'b0 && ^(main_preheaderi_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %20 = select i1 %19, i32 1, i32 %x_offset.09.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_20 = (main_preheaderi_19 ? 32'd1 : main_preheaderi_x_offset09i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %20 = select i1 %19, i32 1, i32 %x_offset.09.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_20_reg <= main_preheaderi_20;
		if (start == 1'b0 && ^(main_preheaderi_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %21 = select i1 %19, i32 1, i32 %y_offset.010.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_21 = (main_preheaderi_19 ? 32'd1 : main_preheaderi_y_offset010i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %21 = select i1 %19, i32 1, i32 %y_offset.010.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_21_reg <= main_preheaderi_21;
		if (start == 1'b0 && ^(main_preheaderi_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %22 = icmp ne i32 %start.011.i, 0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_22 = (main_preheaderi_start011i_reg != 32'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %22 = icmp ne i32 %start.011.i, 0, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_22_reg <= main_preheaderi_22;
		if (start == 1'b0 && ^(main_preheaderi_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %y.off.i.i = add i32 %21, -1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_yoffii = (main_preheaderi_21_reg_stage1 + -32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %y.off.i.i = add i32 %21, -1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_yoffii_reg <= main_preheaderi_yoffii;
		if (start == 1'b0 && ^(main_preheaderi_yoffii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_yoffii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %phitmp.i.i = icmp sgt i32 %20, 510, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_phitmpii = ($signed(main_preheaderi_20_reg_stage1) > $signed(32'd510));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %phitmp.i.i = icmp sgt i32 %20, 510, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_phitmpii_reg <= main_preheaderi_phitmpii;
		if (start == 1'b0 && ^(main_preheaderi_phitmpii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_phitmpii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %notlhs.i.i = icmp ugt i32 %y.off.i.i, 509, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_notlhsii = (main_preheaderi_yoffii > 32'd509);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %notlhs.i.i = icmp ugt i32 %y.off.i.i, 509, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_notlhsii_reg <= main_preheaderi_notlhsii;
		if (start == 1'b0 && ^(main_preheaderi_notlhsii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_notlhsii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %notrhs.i.i = icmp slt i32 %20, 1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_notrhsii = ($signed(main_preheaderi_20_reg_stage1) < $signed(32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %notrhs.i.i = icmp slt i32 %20, 1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_notrhsii_reg <= main_preheaderi_notrhsii;
		if (start == 1'b0 && ^(main_preheaderi_notrhsii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_notrhsii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %not.or.cond3.i.i = or i1 %notrhs.i.i, %notlhs.i.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_notorcond3ii = (main_preheaderi_notrhsii | main_preheaderi_notlhsii);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %not.or.cond3.i.i = or i1 %notrhs.i.i, %notlhs.i.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_notorcond3ii_reg <= main_preheaderi_notorcond3ii;
		if (start == 1'b0 && ^(main_preheaderi_notorcond3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_notorcond3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %phitmp..i.i = or i1 %phitmp.i.i, %not.or.cond3.i.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_phitmpii_var0 = (main_preheaderi_phitmpii | main_preheaderi_notorcond3ii);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %phitmp..i.i = or i1 %phitmp.i.i, %not.or.cond3.i.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_phitmpii_var0_reg <= main_preheaderi_phitmpii_var0;
		if (start == 1'b0 && ^(main_preheaderi_phitmpii_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_phitmpii_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %23 = zext i1 %phitmp..i.i to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_23 = main_preheaderi_phitmpii_var0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %23 = zext i1 %phitmp..i.i to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_23_reg <= main_preheaderi_23;
		if (start == 1'b0 && ^(main_preheaderi_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %24 = zext i8 %window.0.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_24 = main_preheaderi_window010_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %24 = zext i8 %window.0.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_24_reg <= main_preheaderi_24;
		if (start == 1'b0 && ^(main_preheaderi_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %25 = zext i8 %window.0.2.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_25 = main_preheaderi_window020;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %25 = zext i8 %window.0.2.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_25_reg <= main_preheaderi_25;
		if (start == 1'b0 && ^(main_preheaderi_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %26 = mul nsw i32 %25, -2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_26 = (main_preheaderi_25 * -32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %26 = mul nsw i32 %25, -2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_26_reg <= main_preheaderi_26;
		if (start == 1'b0 && ^(main_preheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %27 = sub i32 %26, %24, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_27 = (main_preheaderi_26 - main_preheaderi_24);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %27 = sub i32 %26, %24, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_27_reg <= main_preheaderi_27;
		if (start == 1'b0 && ^(main_preheaderi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %28 = zext i8 %10 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_28 = main_preheaderi_10;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %28 = zext i8 %10 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_28_reg <= main_preheaderi_28;
		if (start == 1'b0 && ^(main_preheaderi_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %29 = sub i32 %27, %28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_29 = (main_preheaderi_27_reg_stage1 - main_preheaderi_28);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %29 = sub i32 %27, %28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_29_reg <= main_preheaderi_29;
		if (start == 1'b0 && ^(main_preheaderi_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %30 = sub i32 %24, %28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_30 = (main_preheaderi_24_reg_stage1 - main_preheaderi_28);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %30 = sub i32 %24, %28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_30_reg <= main_preheaderi_30;
		if (start == 1'b0 && ^(main_preheaderi_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %31 = zext i8 %window.1.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_31 = main_preheaderi_window110_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %31 = zext i8 %window.1.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_31_reg <= main_preheaderi_31;
		if (start == 1'b0 && ^(main_preheaderi_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %32 = shl nuw nsw i32 %31, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_32 = (main_preheaderi_31 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %32 = shl nuw nsw i32 %31, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_32_reg <= main_preheaderi_32;
		if (start == 1'b0 && ^(main_preheaderi_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %33 = add nsw i32 %32, %30, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_33 = (main_preheaderi_32_reg_stage1 + main_preheaderi_30);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %33 = add nsw i32 %32, %30, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_33_reg <= main_preheaderi_33;
		if (start == 1'b0 && ^(main_preheaderi_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %34 = zext i8 %8 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_34 = main_preheaderi_8;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %34 = zext i8 %8 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_34_reg <= main_preheaderi_34;
		if (start == 1'b0 && ^(main_preheaderi_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %35 = mul nsw i32 %34, -2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_35 = (main_preheaderi_34 * -32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %35 = mul nsw i32 %34, -2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_35_reg <= main_preheaderi_35;
		if (start == 1'b0 && ^(main_preheaderi_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %36 = add nsw i32 %35, %33, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_36 = (main_preheaderi_35 + main_preheaderi_33);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %36 = add nsw i32 %35, %33, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_36_reg <= main_preheaderi_36;
		if (start == 1'b0 && ^(main_preheaderi_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %37 = zext i8 %window.2.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_37 = main_preheaderi_window210;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %37 = zext i8 %window.2.1.0 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_37_reg <= main_preheaderi_37;
		if (start == 1'b0 && ^(main_preheaderi_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %38 = add nsw i32 %37, %29, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_38 = (main_preheaderi_37_reg_stage1 + main_preheaderi_29);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %38 = add nsw i32 %37, %29, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_38_reg <= main_preheaderi_38;
		if (start == 1'b0 && ^(main_preheaderi_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %39 = add nsw i32 %37, %36, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_39 = (main_preheaderi_37_reg_stage2 + main_preheaderi_36_reg_stage2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %39 = add nsw i32 %37, %36, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_39_reg <= main_preheaderi_39;
		if (start == 1'b0 && ^(main_preheaderi_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %40 = zext i8 %window.2.2.0 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_40 = main_preheaderi_window220;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %40 = zext i8 %window.2.2.0 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_40_reg <= main_preheaderi_40;
		if (start == 1'b0 && ^(main_preheaderi_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %41 = shl nuw nsw i32 %40, 1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_41 = (main_preheaderi_40 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %41 = shl nuw nsw i32 %40, 1, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_41_reg <= main_preheaderi_41;
		if (start == 1'b0 && ^(main_preheaderi_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %42 = add nsw i32 %41, %38, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_42 = (main_preheaderi_41 + main_preheaderi_38);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %42 = add nsw i32 %41, %38, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_42_reg <= main_preheaderi_42;
		if (start == 1'b0 && ^(main_preheaderi_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %43 = zext i8 %6 to i32, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_43 = main_preheaderi_6;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %43 = zext i8 %6 to i32, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_43_reg <= main_preheaderi_43;
		if (start == 1'b0 && ^(main_preheaderi_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %44 = add nsw i32 %43, %42, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_44 = (main_preheaderi_43 + main_preheaderi_42_reg_stage2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %44 = add nsw i32 %43, %42, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_44_reg <= main_preheaderi_44;
		if (start == 1'b0 && ^(main_preheaderi_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %45 = sub i32 %39, %43, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_45 = (main_preheaderi_39 - main_preheaderi_43);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %45 = sub i32 %39, %43, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_45_reg <= main_preheaderi_45;
		if (start == 1'b0 && ^(main_preheaderi_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %46 = zext i1 %19 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_46 = main_preheaderi_19;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %46 = zext i1 %19 to i32, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_46_reg <= main_preheaderi_46;
		if (start == 1'b0 && ^(main_preheaderi_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %47 = select i1 %22, i32 %start.011.i, i32 %46, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_47 = (main_preheaderi_22 ? main_preheaderi_start011i_reg : main_preheaderi_46);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %47 = select i1 %22, i32 %start.011.i, i32 %46, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_47_reg <= main_preheaderi_47;
		if (start == 1'b0 && ^(main_preheaderi_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %48 = icmp eq i32 %47, 0, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_48 = (main_preheaderi_47_reg_stage1 == 32'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %48 = icmp eq i32 %47, 0, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_48_reg <= main_preheaderi_48;
		if (start == 1'b0 && ^(main_preheaderi_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %49 = icmp sgt i32 %44, 255, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_49 = ($signed(main_preheaderi_44) > $signed(32'd255));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %49 = icmp sgt i32 %44, 255, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_49_reg <= main_preheaderi_49;
		if (start == 1'b0 && ^(main_preheaderi_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %50 = select i1 %49, i32 255, i32 %44, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_50 = (main_preheaderi_49 ? 32'd255 : main_preheaderi_44);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %50 = select i1 %49, i32 255, i32 %44, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_50_reg <= main_preheaderi_50;
		if (start == 1'b0 && ^(main_preheaderi_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %51 = icmp slt i32 %50, 0, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_51 = ($signed(main_preheaderi_50_reg_stage3) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %51 = icmp slt i32 %50, 0, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_51_reg <= main_preheaderi_51;
		if (start == 1'b0 && ^(main_preheaderi_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %52 = icmp sgt i32 %45, 255, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
		main_preheaderi_52 = ($signed(main_preheaderi_45) > $signed(32'd255));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %52 = icmp sgt i32 %45, 255, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 2 avail_time: 2 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_52_reg <= main_preheaderi_52;
		if (start == 1'b0 && ^(main_preheaderi_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %53 = select i1 %52, i32 255, i32 %45, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_53 = (main_preheaderi_52_reg_stage3 ? 32'd255 : main_preheaderi_45_reg_stage3);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %53 = select i1 %52, i32 255, i32 %45, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_53_reg <= main_preheaderi_53;
		if (start == 1'b0 && ^(main_preheaderi_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %54 = icmp slt i32 %53, 0, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_54 = ($signed(main_preheaderi_53) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %54 = icmp slt i32 %53, 0, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_54_reg <= main_preheaderi_54;
		if (start == 1'b0 && ^(main_preheaderi_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.op.i = sub i32 0, %50, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_opi = (32'd0 - main_preheaderi_50_reg_stage3);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.op.i = sub i32 0, %50, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_opi_reg <= main_preheaderi_opi;
		if (start == 1'b0 && ^(main_preheaderi_opi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_opi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.neg.i = select i1 %51, i32 0, i32 %.op.i, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_i1negi = (main_preheaderi_51 ? 32'd0 : main_preheaderi_opi);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i1.neg.i = select i1 %51, i32 0, i32 %.op.i, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_i1negi_reg <= main_preheaderi_i1negi;
		if (start == 1'b0 && ^(main_preheaderi_i1negi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1negi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.op14.op.i = sub i32 255, %53, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
		main_preheaderi_op14opi = (32'd255 - main_preheaderi_53);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.op14.op.i = sub i32 255, %53, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 3 II: 1 start_ii_state = 3 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_op14opi_reg <= main_preheaderi_op14opi;
		if (start == 1'b0 && ^(main_preheaderi_op14opi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_op14opi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.neg.i = select i1 %54, i32 255, i32 %.op14.op.i, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
		main_preheaderi_negi = (main_preheaderi_54_reg_stage4 ? 32'd255 : main_preheaderi_op14opi_reg_stage4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.neg.i = select i1 %54, i32 255, i32 %.op14.op.i, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4))) begin
		main_preheaderi_negi_reg <= main_preheaderi_negi;
		if (start == 1'b0 && ^(main_preheaderi_negi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_negi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %55 = add i32 %.neg.i, %..i1.neg.i, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
		main_preheaderi_55 = (main_preheaderi_negi + main_preheaderi_i1negi_reg_stage4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %55 = add i32 %.neg.i, %..i1.neg.i, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4))) begin
		main_preheaderi_55_reg <= main_preheaderi_55;
		if (start == 1'b0 && ^(main_preheaderi_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %56 = sext i1 %48 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_56 = $signed(main_preheaderi_48);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %56 = sext i1 %48 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_56_reg <= main_preheaderi_56;
		if (start == 1'b0 && ^(main_preheaderi_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %57 = icmp ne i32 %23, %56, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_57 = (main_preheaderi_23 != main_preheaderi_56);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %57 = icmp ne i32 %23, %56, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_57_reg <= main_preheaderi_57;
		if (start == 1'b0 && ^(main_preheaderi_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %58 = trunc i32 %55 to i8, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
		main_preheaderi_58 = main_preheaderi_55[7:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %58 = trunc i32 %55 to i8, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4))) begin
		main_preheaderi_58_reg <= main_preheaderi_58;
		if (start == 1'b0 && ^(main_preheaderi_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %59 = select i1 %57, i8 0, i8 %58, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
		main_preheaderi_59 = (main_preheaderi_57_reg_stage4 ? 8'd0 : main_preheaderi_58);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %59 = select i1 %57, i8 0, i8 %58, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !9
	start_time: 4 avail_time: 4 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 4 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4))) begin
		main_preheaderi_59_reg <= main_preheaderi_59;
		if (start == 1'b0 && ^(main_preheaderi_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %60 = getelementptr inbounds [512 x [512 x i8]]* @output_image, i32 0, i32 %21, i32 %20, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_60 = (1'd0 + ((512 * main_preheaderi_21_reg_stage1) + (1 * main_preheaderi_20_reg_stage1)));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %60 = getelementptr inbounds [512 x [512 x i8]]* @output_image, i32 0, i32 %21, i32 %20, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_60_reg <= main_preheaderi_60;
		if (start == 1'b0 && ^(main_preheaderi_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %61 = add nsw i32 %20, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_61 = (main_preheaderi_20 + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %61 = add nsw i32 %20, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_61_reg <= main_preheaderi_61;
		if (start == 1'b0 && ^(main_preheaderi_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %62 = icmp eq i32 %61, 511, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_62 = (main_preheaderi_61_reg_stage1 == 32'd511);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %62 = icmp eq i32 %61, 511, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_62_reg <= main_preheaderi_62;
		if (start == 1'b0 && ^(main_preheaderi_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %63 = zext i1 %62 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_63 = main_preheaderi_62;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %63 = zext i1 %62 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_63_reg <= main_preheaderi_63;
		if (start == 1'b0 && ^(main_preheaderi_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %64 = add nsw i32 %63, %21, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_64 = (main_preheaderi_63 + main_preheaderi_21_reg_stage1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %64 = add nsw i32 %63, %21, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_64_reg <= main_preheaderi_64;
		if (start == 1'b0 && ^(main_preheaderi_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %65 = select i1 %62, i32 -1, i32 %61, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
		main_preheaderi_65 = (main_preheaderi_62 ? -32'd1 : main_preheaderi_61_reg_stage1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %65 = select i1 %62, i32 -1, i32 %61, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !2
	start_time: 1 avail_time: 1 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_65_reg <= main_preheaderi_65;
		if (start == 1'b0 && ^(main_preheaderi_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %66 = add nsw i32 %i.08.i, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
		main_preheaderi_66 = (loop_1_i_stage0 + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %66 = add nsw i32 %i.08.i, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 0 % 1 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_66_reg <= main_preheaderi_66;
		if (start == 1'b0 && ^(main_preheaderi_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_66_reg"); $finish; end
	end
end
always @(*) begin
		main_preheaderi_exitcond5 = loop_1_pipeline_finish;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_loop_pipeline_wait_loop_1_1)) begin
		main_preheaderi_exitcond5_reg <= loop_1_pipeline_finish;
		if (start == 1'b0 && ^(loop_1_pipeline_finish) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %result.04 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %75, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB_sobel_fast_pipelinedexit_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_result04 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %result.04 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %75, %82 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__82_8) & (memory_controller_waitrequest == 1'd0)) & (main_82_exitcond == 1'd0))) */ begin
		main_preheader_result04 = main_69_75_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %result.04 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %75, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB_sobel_fast_pipelinedexit_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_result04_reg <= main_preheader_result04;
		if (start == 1'b0 && ^(main_preheader_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_result04_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %result.04 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %75, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_8) & (memory_controller_waitrequest == 1'd0)) & (main_82_exitcond == 1'd0))) begin
		main_preheader_result04_reg <= main_preheader_result04;
		if (start == 1'b0 && ^(main_preheader_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %68 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %83, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB_sobel_fast_pipelinedexit_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_68 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %68 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %83, %82 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__82_8) & (memory_controller_waitrequest == 1'd0)) & (main_82_exitcond == 1'd0))) */ begin
		main_preheader_68 = main_82_83;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %68 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %83, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB_sobel_fast_pipelinedexit_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_68_reg <= main_preheader_68;
		if (start == 1'b0 && ^(main_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_68_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %68 = phi i32 [ 0, %sobel_fast_pipelined.exit ], [ %83, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB__82_8) & (memory_controller_waitrequest == 1'd0)) & (main_82_exitcond == 1'd0))) begin
		main_preheader_68_reg <= main_preheader_68;
		if (start == 1'b0 && ^(main_preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %result.12 = phi i32 [ %result.04, %.preheader ], [ %75, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_69_result12 = main_preheader_result04_reg;
	end
	/* main: %69*/
	/*   %result.12 = phi i32 [ %result.04, %.preheader ], [ %75, %80 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__80_7) & (memory_controller_waitrequest == 1'd0)) & (main_80_exitcond1 == 1'd0))) */ begin
		main_69_result12 = main_69_75_reg;
	end
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %result.12 = phi i32 [ %result.04, %.preheader ], [ %75, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_69_result12_reg <= main_69_result12;
		if (start == 1'b0 && ^(main_69_result12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_result12_reg"); $finish; end
	end
	/* main: %69*/
	/*   %result.12 = phi i32 [ %result.04, %.preheader ], [ %75, %80 ]*/
	if ((((cur_state == LEGUP_F_main_BB__80_7) & (memory_controller_waitrequest == 1'd0)) & (main_80_exitcond1 == 1'd0))) begin
		main_69_result12_reg <= main_69_result12;
		if (start == 1'b0 && ^(main_69_result12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_result12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = phi i32 [ 0, %.preheader ], [ %81, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_69_70 = 32'd0;
	end
	/* main: %69*/
	/*   %70 = phi i32 [ 0, %.preheader ], [ %81, %80 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__80_7) & (memory_controller_waitrequest == 1'd0)) & (main_80_exitcond1 == 1'd0))) */ begin
		main_69_70 = main_80_81;
	end
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = phi i32 [ 0, %.preheader ], [ %81, %80 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
	/* main: %69*/
	/*   %70 = phi i32 [ 0, %.preheader ], [ %81, %80 ]*/
	if ((((cur_state == LEGUP_F_main_BB__80_7) & (memory_controller_waitrequest == 1'd0)) & (main_80_exitcond1 == 1'd0))) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %scevgep2 = getelementptr [512 x [512 x i8]]* @output_image, i32 0, i32 %68, i32 %70*/
		main_69_scevgep2 = (1'd0 + ((512 * main_preheader_68_reg) + (1 * main_69_70_reg)));
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %scevgep2 = getelementptr [512 x [512 x i8]]* @output_image, i32 0, i32 %68, i32 %70*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		main_69_scevgep2_reg <= main_69_scevgep2;
		if (start == 1'b0 && ^(main_69_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %scevgep = getelementptr [512 x [512 x i8]]* @elaine_512_golden_output, i32 0, i32 %68, i32 %70*/
		main_69_scevgep = (1'd0 + ((512 * main_preheader_68_reg) + (1 * main_69_70_reg)));
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %scevgep = getelementptr [512 x [512 x i8]]* @elaine_512_golden_output, i32 0, i32 %68, i32 %70*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		main_69_scevgep_reg <= main_69_scevgep;
		if (start == 1'b0 && ^(main_69_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %71 = load i8* %scevgep2, align 1, !tbaa !4*/
		main_69_71 = output_image_out_a;
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %71 = load i8* %scevgep2, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_5)) begin
		main_69_71_reg <= main_69_71;
		if (start == 1'b0 && ^(main_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %72 = load i8* %scevgep, align 1, !tbaa !4*/
		main_69_72 = elaine_512_golden_output_out_a;
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %72 = load i8* %scevgep, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_5)) begin
		main_69_72_reg <= main_69_72;
		if (start == 1'b0 && ^(main_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %73 = icmp eq i8 %71, %72*/
		main_69_73 = (main_69_71 == main_69_72);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %73 = icmp eq i8 %71, %72*/
	if ((cur_state == LEGUP_F_main_BB__69_5)) begin
		main_69_73_reg <= main_69_73;
		if (start == 1'b0 && ^(main_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %74 = zext i1 %73 to i32*/
		main_69_74 = main_69_73;
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %74 = zext i1 %73 to i32*/
	if ((cur_state == LEGUP_F_main_BB__69_5)) begin
		main_69_74_reg <= main_69_74;
		if (start == 1'b0 && ^(main_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %75 = add nsw i32 %74, %result.12*/
		main_69_75 = (main_69_74 + main_69_result12_reg);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %75 = add nsw i32 %74, %result.12*/
	if ((cur_state == LEGUP_F_main_BB__69_5)) begin
		main_69_75_reg <= main_69_75;
		if (start == 1'b0 && ^(main_69_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = zext i8 %71 to i32*/
		main_76_77 = main_69_71_reg;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = zext i8 %71 to i32*/
	if ((cur_state == LEGUP_F_main_BB__76_6)) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %78 = zext i8 %72 to i32*/
		main_76_78 = main_69_72_reg;
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %78 = zext i8 %72 to i32*/
	if ((cur_state == LEGUP_F_main_BB__76_6)) begin
		main_76_78_reg <= main_76_78;
		if (start == 1'b0 && ^(main_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = add nsw i32 %70, 1*/
		main_80_81 = (main_69_70_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = add nsw i32 %70, 1*/
	if ((cur_state == LEGUP_F_main_BB__80_7)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %exitcond1 = icmp eq i32 %81, 512*/
		main_80_exitcond1 = (main_80_81 == 32'd512);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %exitcond1 = icmp eq i32 %81, 512*/
	if ((cur_state == LEGUP_F_main_BB__80_7)) begin
		main_80_exitcond1_reg <= main_80_exitcond1;
		if (start == 1'b0 && ^(main_80_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = add nsw i32 %68, 1*/
		main_82_83 = (main_preheader_68_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = add nsw i32 %68, 1*/
	if ((cur_state == LEGUP_F_main_BB__82_8)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %exitcond = icmp eq i32 %83, 512*/
		main_82_exitcond = (main_82_83 == 32'd512);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %exitcond = icmp eq i32 %83, 512*/
	if ((cur_state == LEGUP_F_main_BB__82_8)) begin
		main_82_exitcond_reg <= main_82_exitcond;
		if (start == 1'b0 && ^(main_82_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %84*/
	/*   %85 = icmp eq i32 %75, 262144*/
		main_84_85 = (main_69_75_reg == 32'd262144);
end
always @(posedge clk) begin
	/* main: %84*/
	/*   %85 = icmp eq i32 %75, 262144*/
	if ((cur_state == LEGUP_F_main_BB__84_9)) begin
		main_84_85_reg <= main_84_85;
		if (start == 1'b0 && ^(main_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_84_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %88*/
	/*   %89 = sub nsw i32 262144, %75*/
		main_88_89 = (32'd262144 - main_69_75_reg);
end
always @(posedge clk) begin
	/* main: %88*/
	/*   %89 = sub nsw i32 262144, %75*/
	if ((cur_state == LEGUP_F_main_BB__88_11)) begin
		main_88_89_reg <= main_88_89;
		if (start == 1'b0 && ^(main_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_88_89_reg"); $finish; end
	end
end
always @(*) begin
	elaine_512_input_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %6 = load i8* %5, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1)) begin
		elaine_512_input_address_a = (main_preheaderi_5 >>> 3'd0);
	end
end
always @(*) begin
	elaine_512_input_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %6 = load i8* %5, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1)) begin
		elaine_512_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	elaine_512_golden_output_address_a = 1'd0;
	/* main: %69*/
	/*   %72 = load i8* %scevgep, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		elaine_512_golden_output_address_a = (main_69_scevgep >>> 3'd0);
	end
end
always @(*) begin
	elaine_512_golden_output_write_enable_a = 1'd0;
	/* main: %69*/
	/*   %72 = load i8* %scevgep, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		elaine_512_golden_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	output_image_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %59, i8* %60, align 1, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !9
	start_time: 4 avail_time: 5 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 5 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4)) begin
		output_image_address_a = (main_preheaderi_60_reg_stage4 >>> 3'd0);
	end
	/* main: %69*/
	/*   %71 = load i8* %scevgep2, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		output_image_address_a = (main_69_scevgep2 >>> 3'd0);
	end
end
always @(*) begin
	output_image_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %59, i8* %60, align 1, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !9
	start_time: 4 avail_time: 5 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 5 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4)) begin
		output_image_write_enable_a = 1'd1;
	end
	/* main: %69*/
	/*   %71 = load i8* %scevgep2, align 1, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__69_4)) begin
		output_image_write_enable_a = 1'd0;
	end
end
always @(*) begin
	output_image_in_a = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %59, i8* %60, align 1, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !9
	start_time: 4 avail_time: 5 stage: 4 II: 1 start_ii_state = 4 % 1 = 0 avail_ii_state = 5 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_4)) begin
		output_image_in_a = main_preheaderi_59;
	end
end
always @(*) begin
	prev_row_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %8 = load i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0)) begin
		prev_row_address_a = (main_preheaderi_7 >>> 3'd0);
	end
end
always @(*) begin
	prev_row_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %8 = load i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0)) begin
		prev_row_write_enable_a = 1'd0;
	end
end
always @(*) begin
	prev_row_address_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %6, i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 2 avail_time: 3 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)) begin
		prev_row_address_b = (main_preheaderi_7_reg_stage2 >>> 3'd0);
	end
end
always @(*) begin
	prev_row_write_enable_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %6, i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 2 avail_time: 3 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)) begin
		prev_row_write_enable_b = 1'd1;
	end
end
always @(*) begin
	prev_row_in_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %6, i8* %7, align 1, !tbaa !4, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 2 avail_time: 3 stage: 2 II: 1 start_ii_state = 2 % 1 = 0 avail_ii_state = 3 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)) begin
		prev_row_in_b = main_preheaderi_6;
	end
end
always @(*) begin
	prev_prev_row_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %10 = load i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0)) begin
		prev_prev_row_address_a = (main_preheaderi_9 >>> 3'd0);
	end
end
always @(*) begin
	prev_prev_row_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %10 = load i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 1 start_ii_state = 0 % 1 = 0 avail_ii_state = 1 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0)) begin
		prev_prev_row_write_enable_a = 1'd0;
	end
end
always @(*) begin
	prev_prev_row_address_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %8, i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1)) begin
		prev_prev_row_address_b = (main_preheaderi_9_reg_stage1 >>> 3'd0);
	end
end
always @(*) begin
	prev_prev_row_write_enable_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %8, i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1)) begin
		prev_prev_row_write_enable_b = 1'd1;
	end
end
always @(*) begin
	prev_prev_row_in_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i8 %8, i8* %9, align 1, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !7, !legup.pipeline.stage !2
	start_time: 1 avail_time: 2 stage: 1 II: 1 start_ii_state = 1 % 1 = 0 avail_ii_state = 2 % 1 = 0*/
	if (((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1)) begin
		prev_prev_row_in_b = main_preheaderi_8;
	end
end
always @(*) begin
	loop_1_pipeline_start = 1'd0;
	if (reset) begin
		loop_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_4) & loop_1_valid_bit_5)))) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0))) begin
		loop_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0)) & loop_1_valid_bit_0))) begin
		loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond)))) begin
		loop_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_4) & loop_1_valid_bit_5)))) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_1 <= loop_1_valid_bit_0;
		if (start == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_2 <= loop_1_valid_bit_1;
		if (start == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_3 <= loop_1_valid_bit_2;
		if (start == 1'b0 && ^(loop_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_4 <= loop_1_valid_bit_3;
		if (start == 1'b0 && ^(loop_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_5 <= loop_1_valid_bit_4;
		if (start == 1'b0 && ^(loop_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0))) begin
		loop_1_i_stage1 <= loop_1_i_stage0;
		if (start == 1'b0 && ^(loop_1_i_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0))) begin
		loop_1_i_stage2 <= loop_1_i_stage1;
		if (start == 1'b0 && ^(loop_1_i_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage3 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0))) begin
		loop_1_i_stage3 <= loop_1_i_stage2;
		if (start == 1'b0 && ^(loop_1_i_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage3 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage4 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0))) begin
		loop_1_i_stage4 <= loop_1_i_stage3;
		if (start == 1'b0 && ^(loop_1_i_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage4 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_3_reg_stage1 <= main_preheaderi_3;
		if (start == 1'b0 && ^(main_preheaderi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_3_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_i_reg_stage1 <= main_preheaderi_i;
		if (start == 1'b0 && ^(main_preheaderi_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_7_reg_stage1 <= main_preheaderi_7;
		if (start == 1'b0 && ^(main_preheaderi_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_7_reg_stage2 <= main_preheaderi_7_reg_stage1;
		if (start == 1'b0 && ^(main_preheaderi_7_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_7_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_9_reg_stage1 <= main_preheaderi_9;
		if (start == 1'b0 && ^(main_preheaderi_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_9_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_20_reg_stage1 <= main_preheaderi_20;
		if (start == 1'b0 && ^(main_preheaderi_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_20_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_21_reg_stage1 <= main_preheaderi_21;
		if (start == 1'b0 && ^(main_preheaderi_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_21_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_24_reg_stage1 <= main_preheaderi_24;
		if (start == 1'b0 && ^(main_preheaderi_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_24_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_27_reg_stage1 <= main_preheaderi_27;
		if (start == 1'b0 && ^(main_preheaderi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_27_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_32_reg_stage1 <= main_preheaderi_32;
		if (start == 1'b0 && ^(main_preheaderi_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_32_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_36_reg_stage2 <= main_preheaderi_36;
		if (start == 1'b0 && ^(main_preheaderi_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_36_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_37_reg_stage1 <= main_preheaderi_37;
		if (start == 1'b0 && ^(main_preheaderi_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_37_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_37_reg_stage2 <= main_preheaderi_37_reg_stage1;
		if (start == 1'b0 && ^(main_preheaderi_37_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_37_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_42_reg_stage2 <= main_preheaderi_42;
		if (start == 1'b0 && ^(main_preheaderi_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_42_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_45_reg_stage3 <= main_preheaderi_45;
		if (start == 1'b0 && ^(main_preheaderi_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_45_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_47_reg_stage1 <= main_preheaderi_47;
		if (start == 1'b0 && ^(main_preheaderi_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_47_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_50_reg_stage3 <= main_preheaderi_50;
		if (start == 1'b0 && ^(main_preheaderi_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_50_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_52_reg_stage3 <= main_preheaderi_52;
		if (start == 1'b0 && ^(main_preheaderi_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_52_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_54_reg_stage4 <= main_preheaderi_54;
		if (start == 1'b0 && ^(main_preheaderi_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_54_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_i1negi_reg_stage4 <= main_preheaderi_i1negi;
		if (start == 1'b0 && ^(main_preheaderi_i1negi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1negi_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_op14opi_reg_stage4 <= main_preheaderi_op14opi;
		if (start == 1'b0 && ^(main_preheaderi_op14opi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_op14opi_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_57_reg_stage2 <= main_preheaderi_57;
		if (start == 1'b0 && ^(main_preheaderi_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_57_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_57_reg_stage3 <= main_preheaderi_57_reg_stage2;
		if (start == 1'b0 && ^(main_preheaderi_57_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_57_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_57_reg_stage4 <= main_preheaderi_57_reg_stage3;
		if (start == 1'b0 && ^(main_preheaderi_57_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_57_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_1))) begin
		main_preheaderi_60_reg_stage2 <= main_preheaderi_60;
		if (start == 1'b0 && ^(main_preheaderi_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_60_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2))) begin
		main_preheaderi_60_reg_stage3 <= main_preheaderi_60_reg_stage2;
		if (start == 1'b0 && ^(main_preheaderi_60_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_60_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_3))) begin
		main_preheaderi_60_reg_stage4 <= main_preheaderi_60_reg_stage3;
		if (start == 1'b0 && ^(main_preheaderi_60_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_60_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_0))) begin
		main_preheaderi_61_reg_stage1 <= main_preheaderi_61;
		if (start == 1'b0 && ^(main_preheaderi_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_61_reg_stage1"); $finish; end
	end
end
always @(*) begin
	loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 262143);
end
always @(*) begin
	loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_4) & loop_1_valid_bit_5)));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %91*/
	/*   ret i32 %75*/
	if ((cur_state == LEGUP_F_main_BB__91_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %91*/
	/*   ret i32 %75*/
	if ((cur_state == LEGUP_F_main_BB__91_12)) begin
		return_val <= main_69_75_reg;
		if (start == 1'b0 && ^(main_69_75_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
