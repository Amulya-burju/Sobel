//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 19 11:00:07 2019
//----------------------------------------------------------------------------//

Target Family: CycloneV
Clock period constraint: 2.000000e+01ns
Start Function: main
state: LEGUP_0
   Transition: if (start): LEGUP_F_main_BB__0_1 default: LEGUP_0
state: LEGUP_F_main_BB__0_1
   %sobel_output = alloca [512 x [512 x i8]], align 1 (endState: LEGUP_F_main_BB__0_1)
   br label %.preheader1.i
   Transition: default: LEGUP_F_main_BB_preheader1i_2
state: LEGUP_F_main_BB_preheader1i_2
   %i.019.i = phi i32 [ 0, %0 ], [ %4, %50 ] (endState: LEGUP_F_main_BB_preheader1i_2)
   %1 = add i32 %i.019.i, 1 (endState: LEGUP_F_main_BB_preheader1i_2)
   %i.0.off.i = add i32 %i.019.i, -1 (endState: LEGUP_F_main_BB_preheader1i_2)
   %2 = icmp ugt i32 %i.0.off.i, 509 (endState: LEGUP_F_main_BB_preheader1i_2)
   %3 = zext i1 %2 to i32 (endState: LEGUP_F_main_BB_preheader1i_2)
   %4 = add nsw i32 %i.019.i, 1 (endState: LEGUP_F_main_BB_preheader1i_2)
   br label %5
   Transition: default: LEGUP_F_main_BB__5_3
state: LEGUP_F_main_BB__5_3
   %j.017.i = phi i32 [ 0, %.preheader1.i ], [ %.pre-phi, %.us-lcssa8.us.i ] (endState: LEGUP_F_main_BB__5_3)
   %j.0.off.i = add i32 %j.017.i, -1 (endState: LEGUP_F_main_BB__5_3)
   %6 = icmp ugt i32 %j.0.off.i, 509 (endState: LEGUP_F_main_BB__5_3)
   %7 = zext i1 %6 to i32 (endState: LEGUP_F_main_BB__5_3)
   %8 = or i32 %7, %3 (endState: LEGUP_F_main_BB__5_3)
   %9 = icmp eq i32 %8, 0 (endState: LEGUP_F_main_BB__5_3)
   br i1 %9, label %.preheader.preheader.i, label %..us-lcssa8.us.i_crit_edge
   Transition: if (%9): LEGUP_F_main_BB_preheaderpreheaderi_5 default: LEGUP_F_main_BB_uslcssa8usi_crit_edge_4
state: LEGUP_F_main_BB_uslcssa8usi_crit_edge_4
   br label %.us-lcssa8.us.i
   Transition: default: LEGUP_F_main_BB_uslcssa8usi_12
state: LEGUP_F_main_BB_preheaderpreheaderi_5
   %scevgep22.sum = add i32 %j.017.i, -1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep21 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %j.017.i (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep18.sum = add i32 %j.017.i, -511 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep10.sum = add i32 %j.017.i, -1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep8.sum = add i32 %j.017.i, 1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep16.sum = add i32 %j.017.i, 511 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %scevgep15 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %1, i32 %j.017.i (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   %32 = load i8* %scevgep15, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_7)
   %scevgep12.sum = add i32 %j.017.i, 1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_5)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_6
state: LEGUP_F_main_BB_preheaderpreheaderi_6
   %scevgep23 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %scevgep22.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   %12 = load i8* %scevgep21, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   %scevgep19 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep18.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   %scevgep11 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep10.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   %20 = load i8* %scevgep11, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   %scevgep9 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep8.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   %scevgep17 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep16.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   %scevgep13 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %1, i32 %scevgep12.sum (endState: LEGUP_F_main_BB_preheaderpreheaderi_6)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_7
state: LEGUP_F_main_BB_preheaderpreheaderi_7
   %10 = load i8* %scevgep23, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %24 = load i8* %scevgep9, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %33 = zext i8 %32 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_7)
   %34 = mul nsw i32 %33, -2 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_8
state: LEGUP_F_main_BB_preheaderpreheaderi_8
   %13 = zext i8 %12 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   %14 = shl nuw nsw i32 %13, 1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   %16 = load i8* %scevgep19, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %21 = zext i8 %20 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_8)
   %22 = mul nsw i32 %21, -2 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %36 = load i8* %scevgep13, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_9
state: LEGUP_F_main_BB_preheaderpreheaderi_9
   %11 = zext i8 %10 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %15 = add nuw nsw i32 %14, %11 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %25 = zext i8 %24 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %26 = shl nuw nsw i32 %25, 1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_9)
   %28 = load i8* %scevgep17, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_10
state: LEGUP_F_main_BB_preheaderpreheaderi_10
   %17 = zext i8 %16 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %18 = sub i32 %17, %11 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %19 = add nuw nsw i32 %17, %15 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %23 = add nsw i32 %22, %18 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %27 = add nsw i32 %26, %23 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   %37 = zext i8 %36 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_10)
   Transition: default: LEGUP_F_main_BB_preheaderpreheaderi_11
state: LEGUP_F_main_BB_preheaderpreheaderi_11
   %29 = zext i8 %28 to i32 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   %30 = sub i32 %27, %29 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   %31 = sub i32 %19, %29 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   %35 = add nsw i32 %34, %31 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   %38 = add nsw i32 %37, %30 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   %39 = sub i32 %35, %37 (endState: LEGUP_F_main_BB_preheaderpreheaderi_11)
   br label %.us-lcssa8.us.i
   Transition: default: LEGUP_F_main_BB_uslcssa8usi_12
state: LEGUP_F_main_BB_uslcssa8usi_12
   %gy_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %39, %.preheader.preheader.i ] (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %gx_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %38, %.preheader.preheader.i ] (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %.pre-phi = add nsw i32 %j.017.i, 1 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %40 = icmp slt i32 %gx_sum.0.lcssa.i, 0 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %41 = sub nsw i32 0, %gx_sum.0.lcssa.i (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %42 = select i1 %40, i32 %41, i32 %gx_sum.0.lcssa.i (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %43 = icmp slt i32 %gy_sum.0.lcssa.i, 0 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %44 = sub nsw i32 0, %gy_sum.0.lcssa.i (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %45 = select i1 %43, i32 %44, i32 %gy_sum.0.lcssa.i (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %46 = add nsw i32 %45, %42 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %47 = icmp sgt i32 %46, 255 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %48 = trunc i32 %46 to i8 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %49 = select i1 %47, i8 -1, i8 %48 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   %scevgep7 = getelementptr [512 x [512 x i8]]* %sobel_output, i32 0, i32 %i.019.i, i32 %j.017.i (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   store i8 %49, i8* %scevgep7, align 1, !tbaa !1 (endState: LEGUP_F_main_BB_uslcssa8usi_13)
   %exitcond25.i = icmp eq i32 %.pre-phi, 512 (endState: LEGUP_F_main_BB_uslcssa8usi_12)
   Transition: default: LEGUP_F_main_BB_uslcssa8usi_13
state: LEGUP_F_main_BB_uslcssa8usi_13
   br i1 %exitcond25.i, label %50, label %5
   Transition: if (%exitcond25.i): LEGUP_F_main_BB__50_14 default: LEGUP_F_main_BB__5_3
state: LEGUP_F_main_BB__50_14
   %exitcond5 = icmp eq i32 %4, 512 (endState: LEGUP_F_main_BB__50_14)
   br i1 %exitcond5, label %.preheader.preheader, label %.preheader1.i
   Transition: if (%exitcond5): LEGUP_F_main_BB_preheaderpreheader_15 default: LEGUP_F_main_BB_preheader1i_2
state: LEGUP_F_main_BB_preheaderpreheader_15
   br label %.preheader
   Transition: default: LEGUP_F_main_BB_preheader_16
state: LEGUP_F_main_BB_preheader_16
   %i.04 = phi i32 [ %57, %56 ], [ 0, %.preheader.preheader ] (endState: LEGUP_F_main_BB_preheader_16)
   %result.03 = phi i32 [ %result.1., %56 ], [ 0, %.preheader.preheader ] (endState: LEGUP_F_main_BB_preheader_16)
   br label %51
   Transition: default: LEGUP_F_main_BB__51_17
state: LEGUP_F_main_BB__51_17
   %j.02 = phi i32 [ 0, %.preheader ], [ %55, %51 ] (endState: LEGUP_F_main_BB__51_17)
   %result.11 = phi i32 [ %result.03, %.preheader ], [ %result.1., %51 ] (endState: LEGUP_F_main_BB__51_17)
   %scevgep2 = getelementptr [512 x [512 x i8]]* %sobel_output, i32 0, i32 %i.04, i32 %j.02 (endState: LEGUP_F_main_BB__51_17)
   %scevgep = getelementptr [512 x [512 x i8]]* @elaine_512_golden_output, i32 0, i32 %i.04, i32 %j.02 (endState: LEGUP_F_main_BB__51_17)
   %52 = load i8* %scevgep2, align 1, !tbaa !1 (endState: LEGUP_F_main_BB__51_19)
   %53 = load i8* %scevgep, align 1, !tbaa !1 (endState: LEGUP_F_main_BB__51_19)
   %55 = add nsw i32 %j.02, 1 (endState: LEGUP_F_main_BB__51_17)
   %exitcond1 = icmp eq i32 %55, 512 (endState: LEGUP_F_main_BB__51_17)
   Transition: default: LEGUP_F_main_BB__51_18
state: LEGUP_F_main_BB__51_18
   Transition: default: LEGUP_F_main_BB__51_19
state: LEGUP_F_main_BB__51_19
   %not. = icmp ne i8 %52, %53 (endState: LEGUP_F_main_BB__51_19)
   %54 = zext i1 %not. to i32 (endState: LEGUP_F_main_BB__51_19)
   %result.1. = add nsw i32 %54, %result.11 (endState: LEGUP_F_main_BB__51_19)
   br i1 %exitcond1, label %56, label %51
   Transition: if (%exitcond1): LEGUP_F_main_BB__56_20 default: LEGUP_F_main_BB__51_17
state: LEGUP_F_main_BB__56_20
   %57 = add nsw i32 %i.04, 1 (endState: LEGUP_F_main_BB__56_20)
   %exitcond = icmp eq i32 %57, 512 (endState: LEGUP_F_main_BB__56_20)
   br i1 %exitcond, label %58, label %.preheader
   Transition: if (%exitcond): LEGUP_F_main_BB__58_21 default: LEGUP_F_main_BB_preheader_16
state: LEGUP_F_main_BB__58_21
   %59 = icmp eq i32 %result.1., 0 (endState: LEGUP_F_main_BB__58_21)
   br i1 %59, label %60, label %62
   Transition: if (%59): LEGUP_F_main_BB__60_22 default: LEGUP_F_main_BB__62_23
state: LEGUP_F_main_BB__60_22
   %61 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str, i32 0, i32 0)) #1 (endState: LEGUP_F_main_BB__60_22)
   br label %64
   Transition: default: LEGUP_F_main_BB__64_24
state: LEGUP_F_main_BB__62_23
   %63 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str1, i32 0, i32 0), i32 %result.1.) #1 (endState: LEGUP_F_main_BB__62_23)
   br label %64
   Transition: default: LEGUP_F_main_BB__64_24
state: LEGUP_F_main_BB__64_24
   ret i32 %result.1.
   Transition: default: LEGUP_0

Basic Block: %.preheader1.i Num States: 1
Basic Block: %5 Num States: 1
Basic Block: %..us-lcssa8.us.i_crit_edge Num States: 1
Basic Block: %.preheader.preheader.i Num States: 7
Basic Block: %.us-lcssa8.us.i Num States: 2
Basic Block: %50 Num States: 1
Basic Block: %.preheader.preheader Num States: 1
Basic Block: %0 Num States: 1
Basic Block: %.preheader Num States: 1
Basic Block: %51 Num States: 3
Basic Block: %56 Num States: 1
Basic Block: %58 Num States: 1
Basic Block: %60 Num States: 1
Basic Block: %62 Num States: 1
Basic Block: %64 Num States: 1
End Function: main
--------------------------------------------------------------------------------

