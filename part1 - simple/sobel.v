//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 19 11:00:08 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @elaine_512_golden_output = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] zeroinitializer, [512 x i8] c"\00\00\00\00\08\08\00\00\00\10\10\00\00\00\14\14\00\00\00\08\08\00\00\00\00\00\0...
`define TAG_g_elaine_512_golden_output `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_elaine_512_golden_output_a {`TAG_g_elaine_512_golden_output, 23'd0}
// @elaine_512_input = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] c"\BE\BE\BE\BE\BE\C0\C0\C0\C0\C0\BC\BC\BC\BC\BC\B7\B7\B7\B7\B7\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B7\B7\B7\B7\B7\B4\B4\B4\B...
`define TAG_g_elaine_512_input `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_elaine_512_input_a {`TAG_g_elaine_512_input, 23'd0}
//   %sobel_output = alloca [512 x [512 x i8]], align 1
`define TAG_main_0_sobel_output `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_0_sobel_output_a {`TAG_main_0_sobel_output, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [17:0] elaine_512_input_address_a;
reg [17:0] elaine_512_input_address_b;
reg elaine_512_input_write_enable_a;
reg elaine_512_input_write_enable_b;
reg [7:0] elaine_512_input_in_a;
reg [7:0] elaine_512_input_in_b;
wire [7:0] elaine_512_input_out_a;
wire [7:0] elaine_512_input_out_b;

// @elaine_512_input = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] c"\BE\BE\BE\BE\BE\C0\C0\C0\C0\C0\BC\BC\BC\BC\BC\B7\B7\B7\B7\B7\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B7\B7\B7\B7\B7\B4\B4\B4\B...
rom_dual_port elaine_512_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( elaine_512_input_address_a ),
	.address_b( elaine_512_input_address_b ),
	.q_a( elaine_512_input_out_a ),
	.q_b( elaine_512_input_out_b)
);
defparam elaine_512_input.width_a = 8;
defparam elaine_512_input.width_b = 8;
defparam elaine_512_input.widthad_a = 18;
defparam elaine_512_input.widthad_b = 18;
defparam elaine_512_input.numwords_a = 262144;
defparam elaine_512_input.numwords_b = 262144;
defparam elaine_512_input.latency = ram_latency;
defparam elaine_512_input.init_file = "elaine_512_input.mif";

reg [17:0] elaine_512_golden_output_address_a;
reg [17:0] elaine_512_golden_output_address_b;
reg elaine_512_golden_output_write_enable_a;
reg elaine_512_golden_output_write_enable_b;
reg [7:0] elaine_512_golden_output_in_a;
reg [7:0] elaine_512_golden_output_in_b;
wire [7:0] elaine_512_golden_output_out_a;
wire [7:0] elaine_512_golden_output_out_b;

// @elaine_512_golden_output = internal unnamed_addr constant [512 x [512 x i8]] [[512 x i8] zeroinitializer, [512 x i8] c"\00\00\00\00\08\08\00\00\00\10\10\00\00\00\14\14\00\00\00\08\08\00\00\00\00\00\0...
rom_dual_port elaine_512_golden_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( elaine_512_golden_output_address_a ),
	.address_b( elaine_512_golden_output_address_b ),
	.q_a( elaine_512_golden_output_out_a ),
	.q_b( elaine_512_golden_output_out_b)
);
defparam elaine_512_golden_output.width_a = 8;
defparam elaine_512_golden_output.width_b = 8;
defparam elaine_512_golden_output.widthad_a = 18;
defparam elaine_512_golden_output.widthad_b = 18;
defparam elaine_512_golden_output.numwords_a = 262144;
defparam elaine_512_golden_output.numwords_b = 262144;
defparam elaine_512_golden_output.latency = ram_latency;
defparam elaine_512_golden_output.init_file = "elaine_512_golden_output.mif";

reg [17:0] main_0_sobel_output_address_a;
reg [17:0] main_0_sobel_output_address_b;
reg main_0_sobel_output_write_enable_a;
reg main_0_sobel_output_write_enable_b;
reg [7:0] main_0_sobel_output_in_a;
reg [7:0] main_0_sobel_output_in_b;
wire [7:0] main_0_sobel_output_out_a;
wire [7:0] main_0_sobel_output_out_b;

//   %sobel_output = alloca [512 x [512 x i8]], align 1
ram_dual_port main_0_sobel_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_sobel_output_address_a ),
	.address_b( main_0_sobel_output_address_b ),
	.wren_a( main_0_sobel_output_write_enable_a ),
	.wren_b( main_0_sobel_output_write_enable_b ),
	.data_a( main_0_sobel_output_in_a ),
	.data_b( main_0_sobel_output_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_sobel_output_out_a ),
	.q_b( main_0_sobel_output_out_b)
);
defparam main_0_sobel_output.width_a = 8;
defparam main_0_sobel_output.width_b = 8;
defparam main_0_sobel_output.widthad_a = 18;
defparam main_0_sobel_output.widthad_b = 18;
defparam main_0_sobel_output.width_be_a = 1;
defparam main_0_sobel_output.width_be_b = 1;
defparam main_0_sobel_output.numwords_a = 262144;
defparam main_0_sobel_output.numwords_b = 262144;
defparam main_0_sobel_output.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_elaine_512_input_a;
assign select_elaine_512_input_a = (tag_a == `TAG_g_elaine_512_input);
reg [ram_latency:0] select_elaine_512_input_reg_a;
wire [7:0] memory_controller_elaine_512_input_out_a;
assign memory_controller_elaine_512_input_out_a = {8{ select_elaine_512_input_reg_a[ram_latency]}} & elaine_512_input_out_a;

wire select_elaine_512_golden_output_a;
assign select_elaine_512_golden_output_a = (tag_a == `TAG_g_elaine_512_golden_output);
reg [ram_latency:0] select_elaine_512_golden_output_reg_a;
wire [7:0] memory_controller_elaine_512_golden_output_out_a;
assign memory_controller_elaine_512_golden_output_out_a = {8{ select_elaine_512_golden_output_reg_a[ram_latency]}} & elaine_512_golden_output_out_a;

wire select_main_0_sobel_output_a;
assign select_main_0_sobel_output_a = (tag_a == `TAG_main_0_sobel_output);
reg [ram_latency:0] select_main_0_sobel_output_reg_a;
wire [7:0] memory_controller_main_0_sobel_output_out_a;
assign memory_controller_main_0_sobel_output_out_a = {8{ select_main_0_sobel_output_reg_a[ram_latency]}} & main_0_sobel_output_out_a;

always @(*)
begin
	elaine_512_input_address_a = memory_controller_address_a [18-1+0:0] & {18{select_elaine_512_input_a}};
	elaine_512_input_write_enable_a = memory_controller_write_enable_a & select_elaine_512_input_a;
	elaine_512_input_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	elaine_512_golden_output_address_a = memory_controller_address_a [18-1+0:0] & {18{select_elaine_512_golden_output_a}};
	elaine_512_golden_output_write_enable_a = memory_controller_write_enable_a & select_elaine_512_golden_output_a;
	elaine_512_golden_output_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	main_0_sobel_output_address_a = memory_controller_address_a [18-1+0:0] & {18{select_main_0_sobel_output_a}};
	main_0_sobel_output_write_enable_a = memory_controller_write_enable_a & select_main_0_sobel_output_a;
	main_0_sobel_output_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_elaine_512_input_out_a | memory_controller_elaine_512_golden_output_out_a | memory_controller_main_0_sobel_output_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_elaine_512_input_reg_a[j+1] <= select_elaine_512_input_reg_a[j];
select_elaine_512_golden_output_reg_a[j+1] <= select_elaine_512_golden_output_reg_a[j];
select_main_0_sobel_output_reg_a[j+1] <= select_main_0_sobel_output_reg_a[j];
end
always @(*)
begin
select_elaine_512_input_reg_a[0] <= select_elaine_512_input_a;
select_elaine_512_golden_output_reg_a[0] <= select_elaine_512_golden_output_a;
select_main_0_sobel_output_reg_a[0] <= select_main_0_sobel_output_a;
end

reg [2:0] select_not_struct_b;

wire select_elaine_512_input_b;
assign select_elaine_512_input_b = (tag_b == `TAG_g_elaine_512_input);
reg [ram_latency:0] select_elaine_512_input_reg_b;
wire [7:0] memory_controller_elaine_512_input_out_b;
assign memory_controller_elaine_512_input_out_b = {8{ select_elaine_512_input_reg_b[ram_latency]}} & elaine_512_input_out_b;

wire select_elaine_512_golden_output_b;
assign select_elaine_512_golden_output_b = (tag_b == `TAG_g_elaine_512_golden_output);
reg [ram_latency:0] select_elaine_512_golden_output_reg_b;
wire [7:0] memory_controller_elaine_512_golden_output_out_b;
assign memory_controller_elaine_512_golden_output_out_b = {8{ select_elaine_512_golden_output_reg_b[ram_latency]}} & elaine_512_golden_output_out_b;

wire select_main_0_sobel_output_b;
assign select_main_0_sobel_output_b = (tag_b == `TAG_main_0_sobel_output);
reg [ram_latency:0] select_main_0_sobel_output_reg_b;
wire [7:0] memory_controller_main_0_sobel_output_out_b;
assign memory_controller_main_0_sobel_output_out_b = {8{ select_main_0_sobel_output_reg_b[ram_latency]}} & main_0_sobel_output_out_b;

always @(*)
begin
	elaine_512_input_address_b = memory_controller_address_b [18-1+0:0] & {18{select_elaine_512_input_b}};
	elaine_512_input_write_enable_b = memory_controller_write_enable_b & select_elaine_512_input_b;
	elaine_512_input_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	elaine_512_golden_output_address_b = memory_controller_address_b [18-1+0:0] & {18{select_elaine_512_golden_output_b}};
	elaine_512_golden_output_write_enable_b = memory_controller_write_enable_b & select_elaine_512_golden_output_b;
	elaine_512_golden_output_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	main_0_sobel_output_address_b = memory_controller_address_b [18-1+0:0] & {18{select_main_0_sobel_output_b}};
	main_0_sobel_output_write_enable_b = memory_controller_write_enable_b & select_main_0_sobel_output_b;
	main_0_sobel_output_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_elaine_512_input_out_b | memory_controller_elaine_512_golden_output_out_b | memory_controller_main_0_sobel_output_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_elaine_512_input_reg_b[j+1] <= select_elaine_512_input_reg_b[j];
select_elaine_512_golden_output_reg_b[j+1] <= select_elaine_512_golden_output_reg_b[j];
select_main_0_sobel_output_reg_b[j+1] <= select_main_0_sobel_output_reg_b[j];
end
always @(*)
begin
select_elaine_512_input_reg_b[0] <= select_elaine_512_input_b;
select_elaine_512_golden_output_reg_b[0] <= select_elaine_512_golden_output_b;
select_main_0_sobel_output_reg_b[0] <= select_main_0_sobel_output_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_preheader1i_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB__5_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_uslcssa8usi_crit_edge_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheaderi_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB_uslcssa8usi_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB_uslcssa8usi_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB__50_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_preheaderpreheader_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_preheader_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB__51_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB__51_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB__51_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB__56_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB__58_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB__60_22 = 5'd22;
parameter [4:0] LEGUP_F_main_BB__62_23 = 5'd23;
parameter [4:0] LEGUP_F_main_BB__64_24 = 5'd24;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] main_preheader1i_i019i;
reg [31:0] main_preheader1i_i019i_reg;
reg [31:0] main_preheader1i_1;
reg [31:0] main_preheader1i_1_reg;
reg [31:0] main_preheader1i_i0offi;
reg [31:0] main_preheader1i_i0offi_reg;
reg  main_preheader1i_2;
reg [31:0] main_preheader1i_3;
reg [31:0] main_preheader1i_3_reg;
reg [31:0] main_preheader1i_4;
reg [31:0] main_preheader1i_4_reg;
reg [31:0] main_5_j017i;
reg [31:0] main_5_j017i_reg;
reg [31:0] main_5_j0offi;
reg  main_5_6;
reg [31:0] main_5_7;
reg [31:0] main_5_8;
reg  main_5_9;
reg [31:0] main_preheaderpreheaderi_scevgep22sum;
reg [31:0] main_preheaderpreheaderi_scevgep22sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep23_reg;
reg [7:0] main_preheaderpreheaderi_10;
reg [31:0] main_preheaderpreheaderi_11;
reg [31:0] main_preheaderpreheaderi_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep21_reg;
reg [7:0] main_preheaderpreheaderi_12;
reg [31:0] main_preheaderpreheaderi_13;
reg [31:0] main_preheaderpreheaderi_14;
reg [31:0] main_preheaderpreheaderi_14_reg;
reg [31:0] main_preheaderpreheaderi_15;
reg [31:0] main_preheaderpreheaderi_15_reg;
reg [31:0] main_preheaderpreheaderi_scevgep18sum;
reg [31:0] main_preheaderpreheaderi_scevgep18sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep19_reg;
reg [7:0] main_preheaderpreheaderi_16;
reg [31:0] main_preheaderpreheaderi_17;
reg [31:0] main_preheaderpreheaderi_18;
reg [31:0] main_preheaderpreheaderi_19;
reg [31:0] main_preheaderpreheaderi_19_reg;
reg [31:0] main_preheaderpreheaderi_scevgep10sum;
reg [31:0] main_preheaderpreheaderi_scevgep10sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep11;
reg [7:0] main_preheaderpreheaderi_20;
reg [31:0] main_preheaderpreheaderi_21;
reg [31:0] main_preheaderpreheaderi_22;
reg [31:0] main_preheaderpreheaderi_22_reg;
reg [31:0] main_preheaderpreheaderi_23;
reg [31:0] main_preheaderpreheaderi_scevgep8sum;
reg [31:0] main_preheaderpreheaderi_scevgep8sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep9_reg;
reg [7:0] main_preheaderpreheaderi_24;
reg [31:0] main_preheaderpreheaderi_25;
reg [31:0] main_preheaderpreheaderi_26;
reg [31:0] main_preheaderpreheaderi_26_reg;
reg [31:0] main_preheaderpreheaderi_27;
reg [31:0] main_preheaderpreheaderi_27_reg;
reg [31:0] main_preheaderpreheaderi_scevgep16sum;
reg [31:0] main_preheaderpreheaderi_scevgep16sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep17_reg;
reg [7:0] main_preheaderpreheaderi_28;
reg [31:0] main_preheaderpreheaderi_29;
reg [31:0] main_preheaderpreheaderi_30;
reg [31:0] main_preheaderpreheaderi_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep15;
reg [7:0] main_preheaderpreheaderi_32;
reg [31:0] main_preheaderpreheaderi_33;
reg [31:0] main_preheaderpreheaderi_34;
reg [31:0] main_preheaderpreheaderi_34_reg;
reg [31:0] main_preheaderpreheaderi_35;
reg [31:0] main_preheaderpreheaderi_scevgep12sum;
reg [31:0] main_preheaderpreheaderi_scevgep12sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderpreheaderi_scevgep13_reg;
reg [7:0] main_preheaderpreheaderi_36;
reg [31:0] main_preheaderpreheaderi_37;
reg [31:0] main_preheaderpreheaderi_37_reg;
reg [31:0] main_preheaderpreheaderi_38;
reg [31:0] main_preheaderpreheaderi_39;
reg [31:0] main_uslcssa8usi_gy_sum0lcssai;
reg [31:0] main_uslcssa8usi_gy_sum0lcssai_reg;
reg [31:0] main_uslcssa8usi_gx_sum0lcssai;
reg [31:0] main_uslcssa8usi_gx_sum0lcssai_reg;
reg [31:0] main_uslcssa8usi_prephi;
reg [31:0] main_uslcssa8usi_prephi_reg;
reg  main_uslcssa8usi_40;
reg [31:0] main_uslcssa8usi_41;
reg [31:0] main_uslcssa8usi_42;
reg  main_uslcssa8usi_43;
reg [31:0] main_uslcssa8usi_44;
reg [31:0] main_uslcssa8usi_45;
reg [31:0] main_uslcssa8usi_46;
reg  main_uslcssa8usi_47;
reg [7:0] main_uslcssa8usi_48;
reg [7:0] main_uslcssa8usi_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uslcssa8usi_scevgep7;
reg  main_uslcssa8usi_exitcond25i;
reg  main_uslcssa8usi_exitcond25i_reg;
reg  main_50_exitcond5;
reg [31:0] main_preheader_i04;
reg [31:0] main_preheader_i04_reg;
reg [31:0] main_preheader_result03;
reg [31:0] main_preheader_result03_reg;
reg [31:0] main_51_j02;
reg [31:0] main_51_j02_reg;
reg [31:0] main_51_result11;
reg [31:0] main_51_result11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_51_scevgep;
reg [7:0] main_51_52;
reg [7:0] main_51_53;
reg  main_51_not;
reg [31:0] main_51_54;
reg [31:0] main_51_result1;
reg [31:0] main_51_result1_reg;
reg [31:0] main_51_55;
reg [31:0] main_51_55_reg;
reg  main_51_exitcond1;
reg  main_51_exitcond1_reg;
reg [31:0] main_56_57;
reg  main_56_exitcond;
reg  main_58_59;
reg  lpm_mult_main_preheaderpreheaderi_34_en;
reg [31:0] main_preheaderpreheaderi_34_stage0_reg;
reg  lpm_mult_main_preheaderpreheaderi_22_en;
reg [31:0] main_preheaderpreheaderi_22_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %60*/
	/*   %61 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__60_22)) begin
		$write("PASS!\n");
	end
	/* main: %62*/
	/*   %63 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str1, i32 0, i32 0), i32 %result.1.) #1*/
	if ((cur_state == LEGUP_F_main_BB__62_23)) begin
		$write("FAIL with %d differences\n", $signed(main_51_result1_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_51_result1_reg) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB_preheader1i_2;
LEGUP_F_main_BB__50_14:
	if ((main_50_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_15;
	else if ((main_50_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1i_2;
LEGUP_F_main_BB__51_17:
		next_state = LEGUP_F_main_BB__51_18;
LEGUP_F_main_BB__51_18:
		next_state = LEGUP_F_main_BB__51_19;
LEGUP_F_main_BB__51_19:
	if ((main_51_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB__56_20;
	else if ((main_51_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB__51_17;
LEGUP_F_main_BB__56_20:
	if ((main_56_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__58_21;
	else if ((main_56_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_16;
LEGUP_F_main_BB__58_21:
	if ((main_58_59 == 1'd1))
		next_state = LEGUP_F_main_BB__60_22;
	else if ((main_58_59 == 1'd0))
		next_state = LEGUP_F_main_BB__62_23;
LEGUP_F_main_BB__5_3:
	if ((main_5_9 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_5;
	else if ((main_5_9 == 1'd0))
		next_state = LEGUP_F_main_BB_uslcssa8usi_crit_edge_4;
LEGUP_F_main_BB__60_22:
		next_state = LEGUP_F_main_BB__64_24;
LEGUP_F_main_BB__62_23:
		next_state = LEGUP_F_main_BB__64_24;
LEGUP_F_main_BB__64_24:
		next_state = LEGUP_0;
LEGUP_F_main_BB_preheader1i_2:
		next_state = LEGUP_F_main_BB__5_3;
LEGUP_F_main_BB_preheader_16:
		next_state = LEGUP_F_main_BB__51_17;
LEGUP_F_main_BB_preheaderpreheader_15:
		next_state = LEGUP_F_main_BB_preheader_16;
LEGUP_F_main_BB_preheaderpreheaderi_10:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_11;
LEGUP_F_main_BB_preheaderpreheaderi_11:
		next_state = LEGUP_F_main_BB_uslcssa8usi_12;
LEGUP_F_main_BB_preheaderpreheaderi_5:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_6;
LEGUP_F_main_BB_preheaderpreheaderi_6:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_7;
LEGUP_F_main_BB_preheaderpreheaderi_7:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_8;
LEGUP_F_main_BB_preheaderpreheaderi_8:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_9;
LEGUP_F_main_BB_preheaderpreheaderi_9:
		next_state = LEGUP_F_main_BB_preheaderpreheaderi_10;
LEGUP_F_main_BB_uslcssa8usi_12:
		next_state = LEGUP_F_main_BB_uslcssa8usi_13;
LEGUP_F_main_BB_uslcssa8usi_13:
	if ((main_uslcssa8usi_exitcond25i_reg == 1'd1))
		next_state = LEGUP_F_main_BB__50_14;
	else if ((main_uslcssa8usi_exitcond25i_reg == 1'd0))
		next_state = LEGUP_F_main_BB__5_3;
LEGUP_F_main_BB_uslcssa8usi_crit_edge_4:
		next_state = LEGUP_F_main_BB_uslcssa8usi_12;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %i.019.i = phi i32 [ 0, %0 ], [ %4, %50 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i_i019i = 32'd0;
	end
	/* main: %.preheader1.i*/
	/*   %i.019.i = phi i32 [ 0, %0 ], [ %4, %50 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__50_14) & (memory_controller_waitrequest == 1'd0)) & (main_50_exitcond5 == 1'd0))) */ begin
		main_preheader1i_i019i = main_preheader1i_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i*/
	/*   %i.019.i = phi i32 [ 0, %0 ], [ %4, %50 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1i_i019i_reg <= main_preheader1i_i019i;
		if (start == 1'b0 && ^(main_preheader1i_i019i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_i019i_reg"); $finish; end
	end
	/* main: %.preheader1.i*/
	/*   %i.019.i = phi i32 [ 0, %0 ], [ %4, %50 ]*/
	if ((((cur_state == LEGUP_F_main_BB__50_14) & (memory_controller_waitrequest == 1'd0)) & (main_50_exitcond5 == 1'd0))) begin
		main_preheader1i_i019i_reg <= main_preheader1i_i019i;
		if (start == 1'b0 && ^(main_preheader1i_i019i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_i019i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %1 = add i32 %i.019.i, 1*/
		main_preheader1i_1 = (main_preheader1i_i019i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i*/
	/*   %1 = add i32 %i.019.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i_2)) begin
		main_preheader1i_1_reg <= main_preheader1i_1;
		if (start == 1'b0 && ^(main_preheader1i_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %i.0.off.i = add i32 %i.019.i, -1*/
		main_preheader1i_i0offi = (main_preheader1i_i019i_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i*/
	/*   %i.0.off.i = add i32 %i.019.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i_2)) begin
		main_preheader1i_i0offi_reg <= main_preheader1i_i0offi;
		if (start == 1'b0 && ^(main_preheader1i_i0offi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_i0offi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %2 = icmp ugt i32 %i.0.off.i, 509*/
		main_preheader1i_2 = (main_preheader1i_i0offi > 32'd509);
end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %3 = zext i1 %2 to i32*/
		main_preheader1i_3 = main_preheader1i_2;
end
always @(posedge clk) begin
	/* main: %.preheader1.i*/
	/*   %3 = zext i1 %2 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i_2)) begin
		main_preheader1i_3_reg <= main_preheader1i_3;
		if (start == 1'b0 && ^(main_preheader1i_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i*/
	/*   %4 = add nsw i32 %i.019.i, 1*/
		main_preheader1i_4 = (main_preheader1i_i019i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader1.i*/
	/*   %4 = add nsw i32 %i.019.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader1i_2)) begin
		main_preheader1i_4_reg <= main_preheader1i_4;
		if (start == 1'b0 && ^(main_preheader1i_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1i_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %j.017.i = phi i32 [ 0, %.preheader1.i ], [ %.pre-phi, %.us-lcssa8.us.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_j017i = 32'd0;
	end
	/* main: %5*/
	/*   %j.017.i = phi i32 [ 0, %.preheader1.i ], [ %.pre-phi, %.us-lcssa8.us.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_uslcssa8usi_13) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssa8usi_exitcond25i_reg == 1'd0))) */ begin
		main_5_j017i = main_uslcssa8usi_prephi_reg;
	end
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %j.017.i = phi i32 [ 0, %.preheader1.i ], [ %.pre-phi, %.us-lcssa8.us.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1i_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_5_j017i_reg <= main_5_j017i;
		if (start == 1'b0 && ^(main_5_j017i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_j017i_reg"); $finish; end
	end
	/* main: %5*/
	/*   %j.017.i = phi i32 [ 0, %.preheader1.i ], [ %.pre-phi, %.us-lcssa8.us.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_uslcssa8usi_13) & (memory_controller_waitrequest == 1'd0)) & (main_uslcssa8usi_exitcond25i_reg == 1'd0))) begin
		main_5_j017i_reg <= main_5_j017i;
		if (start == 1'b0 && ^(main_5_j017i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_j017i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %j.0.off.i = add i32 %j.017.i, -1*/
		main_5_j0offi = (main_5_j017i_reg + -32'd1);
end
always @(*) begin
	/* main: %5*/
	/*   %6 = icmp ugt i32 %j.0.off.i, 509*/
		main_5_6 = (main_5_j0offi > 32'd509);
end
always @(*) begin
	/* main: %5*/
	/*   %7 = zext i1 %6 to i32*/
		main_5_7 = main_5_6;
end
always @(*) begin
	/* main: %5*/
	/*   %8 = or i32 %7, %3*/
		main_5_8 = (main_5_7 | main_preheader1i_3_reg);
end
always @(*) begin
	/* main: %5*/
	/*   %9 = icmp eq i32 %8, 0*/
		main_5_9 = (main_5_8 == 32'd0);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep22.sum = add i32 %j.017.i, -1*/
		main_preheaderpreheaderi_scevgep22sum = (main_5_j017i_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep22.sum = add i32 %j.017.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep22sum_reg <= main_preheaderpreheaderi_scevgep22sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep22sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep22sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep23 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %scevgep22.sum*/
		main_preheaderpreheaderi_scevgep23 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i0offi_reg) + (1 * main_preheaderpreheaderi_scevgep22sum_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep23 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %scevgep22.sum*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		main_preheaderpreheaderi_scevgep23_reg <= main_preheaderpreheaderi_scevgep23;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %10 = load i8* %scevgep23, align 1, !tbaa !1*/
		main_preheaderpreheaderi_10 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %11 = zext i8 %10 to i32*/
		main_preheaderpreheaderi_11 = main_preheaderpreheaderi_10;
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %11 = zext i8 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		main_preheaderpreheaderi_11_reg <= main_preheaderpreheaderi_11;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep21 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %j.017.i*/
		main_preheaderpreheaderi_scevgep21 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i0offi_reg) + (1 * main_5_j017i_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep21 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.0.off.i, i32 %j.017.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep21_reg <= main_preheaderpreheaderi_scevgep21;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %12 = load i8* %scevgep21, align 1, !tbaa !1*/
		main_preheaderpreheaderi_12 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %13 = zext i8 %12 to i32*/
		main_preheaderpreheaderi_13 = main_preheaderpreheaderi_12;
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %14 = shl nuw nsw i32 %13, 1*/
		main_preheaderpreheaderi_14 = (main_preheaderpreheaderi_13 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %14 = shl nuw nsw i32 %13, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		main_preheaderpreheaderi_14_reg <= main_preheaderpreheaderi_14;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %15 = add nuw nsw i32 %14, %11*/
		main_preheaderpreheaderi_15 = (main_preheaderpreheaderi_14_reg + main_preheaderpreheaderi_11);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %15 = add nuw nsw i32 %14, %11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		main_preheaderpreheaderi_15_reg <= main_preheaderpreheaderi_15;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep18.sum = add i32 %j.017.i, -511*/
		main_preheaderpreheaderi_scevgep18sum = (main_5_j017i_reg + -32'd511);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep18.sum = add i32 %j.017.i, -511*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep18sum_reg <= main_preheaderpreheaderi_scevgep18sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep18sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep18sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep19 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep18.sum*/
		main_preheaderpreheaderi_scevgep19 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i019i_reg) + (1 * main_preheaderpreheaderi_scevgep18sum_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep19 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep18.sum*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		main_preheaderpreheaderi_scevgep19_reg <= main_preheaderpreheaderi_scevgep19;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %16 = load i8* %scevgep19, align 1, !tbaa !1*/
		main_preheaderpreheaderi_16 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %17 = zext i8 %16 to i32*/
		main_preheaderpreheaderi_17 = main_preheaderpreheaderi_16;
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %18 = sub i32 %17, %11*/
		main_preheaderpreheaderi_18 = (main_preheaderpreheaderi_17 - main_preheaderpreheaderi_11_reg);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %19 = add nuw nsw i32 %17, %15*/
		main_preheaderpreheaderi_19 = (main_preheaderpreheaderi_17 + main_preheaderpreheaderi_15_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %19 = add nuw nsw i32 %17, %15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_10)) begin
		main_preheaderpreheaderi_19_reg <= main_preheaderpreheaderi_19;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep10.sum = add i32 %j.017.i, -1*/
		main_preheaderpreheaderi_scevgep10sum = (main_5_j017i_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep10.sum = add i32 %j.017.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep10sum_reg <= main_preheaderpreheaderi_scevgep10sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep10sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep10sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep11 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep10.sum*/
		main_preheaderpreheaderi_scevgep11 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i019i_reg) + (1 * main_preheaderpreheaderi_scevgep10sum_reg)));
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %20 = load i8* %scevgep11, align 1, !tbaa !1*/
		main_preheaderpreheaderi_20 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %21 = zext i8 %20 to i32*/
		main_preheaderpreheaderi_21 = main_preheaderpreheaderi_20;
end
always @(*) begin
	main_preheaderpreheaderi_22 = main_preheaderpreheaderi_22_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %22 = mul nsw i32 %21, -2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		main_preheaderpreheaderi_22_reg <= main_preheaderpreheaderi_22;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_22_reg"); $finish; end
	end
	/* main: %.preheader.preheader.i*/
	/*   %22 = mul nsw i32 %21, -2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		main_preheaderpreheaderi_22_reg <= main_preheaderpreheaderi_22;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %23 = add nsw i32 %22, %18*/
		main_preheaderpreheaderi_23 = (main_preheaderpreheaderi_22_reg + main_preheaderpreheaderi_18);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep8.sum = add i32 %j.017.i, 1*/
		main_preheaderpreheaderi_scevgep8sum = (main_5_j017i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep8.sum = add i32 %j.017.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep8sum_reg <= main_preheaderpreheaderi_scevgep8sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep8sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep8sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep9 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep8.sum*/
		main_preheaderpreheaderi_scevgep9 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i019i_reg) + (1 * main_preheaderpreheaderi_scevgep8sum_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep9 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep8.sum*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		main_preheaderpreheaderi_scevgep9_reg <= main_preheaderpreheaderi_scevgep9;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %24 = load i8* %scevgep9, align 1, !tbaa !1*/
		main_preheaderpreheaderi_24 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %25 = zext i8 %24 to i32*/
		main_preheaderpreheaderi_25 = main_preheaderpreheaderi_24;
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %26 = shl nuw nsw i32 %25, 1*/
		main_preheaderpreheaderi_26 = (main_preheaderpreheaderi_25 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %26 = shl nuw nsw i32 %25, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		main_preheaderpreheaderi_26_reg <= main_preheaderpreheaderi_26;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %27 = add nsw i32 %26, %23*/
		main_preheaderpreheaderi_27 = (main_preheaderpreheaderi_26_reg + main_preheaderpreheaderi_23);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %27 = add nsw i32 %26, %23*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_10)) begin
		main_preheaderpreheaderi_27_reg <= main_preheaderpreheaderi_27;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep16.sum = add i32 %j.017.i, 511*/
		main_preheaderpreheaderi_scevgep16sum = (main_5_j017i_reg + 32'd511);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep16.sum = add i32 %j.017.i, 511*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep16sum_reg <= main_preheaderpreheaderi_scevgep16sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep16sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep16sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep17 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep16.sum*/
		main_preheaderpreheaderi_scevgep17 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_i019i_reg) + (1 * main_preheaderpreheaderi_scevgep16sum_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep17 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %i.019.i, i32 %scevgep16.sum*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		main_preheaderpreheaderi_scevgep17_reg <= main_preheaderpreheaderi_scevgep17;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %28 = load i8* %scevgep17, align 1, !tbaa !1*/
		main_preheaderpreheaderi_28 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %29 = zext i8 %28 to i32*/
		main_preheaderpreheaderi_29 = main_preheaderpreheaderi_28;
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %30 = sub i32 %27, %29*/
		main_preheaderpreheaderi_30 = (main_preheaderpreheaderi_27_reg - main_preheaderpreheaderi_29);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %31 = sub i32 %19, %29*/
		main_preheaderpreheaderi_31 = (main_preheaderpreheaderi_19_reg - main_preheaderpreheaderi_29);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep15 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %1, i32 %j.017.i*/
		main_preheaderpreheaderi_scevgep15 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_1_reg) + (1 * main_5_j017i_reg)));
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %32 = load i8* %scevgep15, align 1, !tbaa !1*/
		main_preheaderpreheaderi_32 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %33 = zext i8 %32 to i32*/
		main_preheaderpreheaderi_33 = main_preheaderpreheaderi_32;
end
always @(*) begin
	main_preheaderpreheaderi_34 = main_preheaderpreheaderi_34_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %34 = mul nsw i32 %33, -2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		main_preheaderpreheaderi_34_reg <= main_preheaderpreheaderi_34;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_34_reg"); $finish; end
	end
	/* main: %.preheader.preheader.i*/
	/*   %34 = mul nsw i32 %33, -2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		main_preheaderpreheaderi_34_reg <= main_preheaderpreheaderi_34;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %35 = add nsw i32 %34, %31*/
		main_preheaderpreheaderi_35 = (main_preheaderpreheaderi_34_reg + main_preheaderpreheaderi_31);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep12.sum = add i32 %j.017.i, 1*/
		main_preheaderpreheaderi_scevgep12sum = (main_5_j017i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep12.sum = add i32 %j.017.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		main_preheaderpreheaderi_scevgep12sum_reg <= main_preheaderpreheaderi_scevgep12sum;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep12sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep12sum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep13 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %1, i32 %scevgep12.sum*/
		main_preheaderpreheaderi_scevgep13 = (`TAG_g_elaine_512_input_a + ((512 * main_preheader1i_1_reg) + (1 * main_preheaderpreheaderi_scevgep12sum_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %scevgep13 = getelementptr [512 x [512 x i8]]* @elaine_512_input, i32 0, i32 %1, i32 %scevgep12.sum*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		main_preheaderpreheaderi_scevgep13_reg <= main_preheaderpreheaderi_scevgep13;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %36 = load i8* %scevgep13, align 1, !tbaa !1*/
		main_preheaderpreheaderi_36 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %37 = zext i8 %36 to i32*/
		main_preheaderpreheaderi_37 = main_preheaderpreheaderi_36;
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %37 = zext i8 %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_10)) begin
		main_preheaderpreheaderi_37_reg <= main_preheaderpreheaderi_37;
		if (start == 1'b0 && ^(main_preheaderpreheaderi_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderpreheaderi_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %38 = add nsw i32 %37, %30*/
		main_preheaderpreheaderi_38 = (main_preheaderpreheaderi_37_reg + main_preheaderpreheaderi_30);
end
always @(*) begin
	/* main: %.preheader.preheader.i*/
	/*   %39 = sub i32 %35, %37*/
		main_preheaderpreheaderi_39 = (main_preheaderpreheaderi_35 - main_preheaderpreheaderi_37_reg);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %gy_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %39, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uslcssa8usi_crit_edge_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gy_sum0lcssai = 32'd0;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   %gy_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %39, %.preheader.preheader.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uslcssa8usi_gy_sum0lcssai = main_preheaderpreheaderi_39;
	end
end
always @(posedge clk) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %gy_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %39, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uslcssa8usi_crit_edge_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gy_sum0lcssai_reg <= main_uslcssa8usi_gy_sum0lcssai;
		if (start == 1'b0 && ^(main_uslcssa8usi_gy_sum0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_gy_sum0lcssai_reg"); $finish; end
	end
	/* main: %.us-lcssa8.us.i*/
	/*   %gy_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %39, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gy_sum0lcssai_reg <= main_uslcssa8usi_gy_sum0lcssai;
		if (start == 1'b0 && ^(main_uslcssa8usi_gy_sum0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_gy_sum0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %gx_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %38, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uslcssa8usi_crit_edge_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gx_sum0lcssai = 32'd0;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   %gx_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %38, %.preheader.preheader.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uslcssa8usi_gx_sum0lcssai = main_preheaderpreheaderi_38;
	end
end
always @(posedge clk) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %gx_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %38, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_uslcssa8usi_crit_edge_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gx_sum0lcssai_reg <= main_uslcssa8usi_gx_sum0lcssai;
		if (start == 1'b0 && ^(main_uslcssa8usi_gx_sum0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_gx_sum0lcssai_reg"); $finish; end
	end
	/* main: %.us-lcssa8.us.i*/
	/*   %gx_sum.0.lcssa.i = phi i32 [ 0, %..us-lcssa8.us.i_crit_edge ], [ %38, %.preheader.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_11) & (memory_controller_waitrequest == 1'd0))) begin
		main_uslcssa8usi_gx_sum0lcssai_reg <= main_uslcssa8usi_gx_sum0lcssai;
		if (start == 1'b0 && ^(main_uslcssa8usi_gx_sum0lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_gx_sum0lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %.pre-phi = add nsw i32 %j.017.i, 1*/
		main_uslcssa8usi_prephi = (main_5_j017i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %.pre-phi = add nsw i32 %j.017.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		main_uslcssa8usi_prephi_reg <= main_uslcssa8usi_prephi;
		if (start == 1'b0 && ^(main_uslcssa8usi_prephi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_prephi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %40 = icmp slt i32 %gx_sum.0.lcssa.i, 0*/
		main_uslcssa8usi_40 = ($signed(main_uslcssa8usi_gx_sum0lcssai_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %41 = sub nsw i32 0, %gx_sum.0.lcssa.i*/
		main_uslcssa8usi_41 = (32'd0 - main_uslcssa8usi_gx_sum0lcssai_reg);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %42 = select i1 %40, i32 %41, i32 %gx_sum.0.lcssa.i*/
		main_uslcssa8usi_42 = (main_uslcssa8usi_40 ? main_uslcssa8usi_41 : main_uslcssa8usi_gx_sum0lcssai_reg);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %43 = icmp slt i32 %gy_sum.0.lcssa.i, 0*/
		main_uslcssa8usi_43 = ($signed(main_uslcssa8usi_gy_sum0lcssai_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %44 = sub nsw i32 0, %gy_sum.0.lcssa.i*/
		main_uslcssa8usi_44 = (32'd0 - main_uslcssa8usi_gy_sum0lcssai_reg);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %45 = select i1 %43, i32 %44, i32 %gy_sum.0.lcssa.i*/
		main_uslcssa8usi_45 = (main_uslcssa8usi_43 ? main_uslcssa8usi_44 : main_uslcssa8usi_gy_sum0lcssai_reg);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %46 = add nsw i32 %45, %42*/
		main_uslcssa8usi_46 = (main_uslcssa8usi_45 + main_uslcssa8usi_42);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %47 = icmp sgt i32 %46, 255*/
		main_uslcssa8usi_47 = ($signed(main_uslcssa8usi_46) > $signed(32'd255));
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %48 = trunc i32 %46 to i8*/
		main_uslcssa8usi_48 = main_uslcssa8usi_46[7:0];
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %49 = select i1 %47, i8 -1, i8 %48*/
		main_uslcssa8usi_49 = (main_uslcssa8usi_47 ? -8'd1 : main_uslcssa8usi_48);
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %scevgep7 = getelementptr [512 x [512 x i8]]* %sobel_output, i32 0, i32 %i.019.i, i32 %j.017.i*/
		main_uslcssa8usi_scevgep7 = (`TAG_main_0_sobel_output_a + ((512 * main_preheader1i_i019i_reg) + (1 * main_5_j017i_reg)));
end
always @(*) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %exitcond25.i = icmp eq i32 %.pre-phi, 512*/
		main_uslcssa8usi_exitcond25i = (main_uslcssa8usi_prephi == 32'd512);
end
always @(posedge clk) begin
	/* main: %.us-lcssa8.us.i*/
	/*   %exitcond25.i = icmp eq i32 %.pre-phi, 512*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		main_uslcssa8usi_exitcond25i_reg <= main_uslcssa8usi_exitcond25i;
		if (start == 1'b0 && ^(main_uslcssa8usi_exitcond25i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uslcssa8usi_exitcond25i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %exitcond5 = icmp eq i32 %4, 512*/
		main_50_exitcond5 = (main_preheader1i_4_reg == 32'd512);
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.04 = phi i32 [ %57, %56 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i04 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.04 = phi i32 [ %57, %56 ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__56_20) & (memory_controller_waitrequest == 1'd0)) & (main_56_exitcond == 1'd0))) */ begin
		main_preheader_i04 = main_56_57;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.04 = phi i32 [ %57, %56 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_i04_reg <= main_preheader_i04;
		if (start == 1'b0 && ^(main_preheader_i04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i04_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.04 = phi i32 [ %57, %56 ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__56_20) & (memory_controller_waitrequest == 1'd0)) & (main_56_exitcond == 1'd0))) begin
		main_preheader_i04_reg <= main_preheader_i04;
		if (start == 1'b0 && ^(main_preheader_i04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %result.03 = phi i32 [ %result.1., %56 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_result03 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %result.03 = phi i32 [ %result.1., %56 ], [ 0, %.preheader.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__56_20) & (memory_controller_waitrequest == 1'd0)) & (main_56_exitcond == 1'd0))) */ begin
		main_preheader_result03 = main_51_result1_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %result.03 = phi i32 [ %result.1., %56 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_result03_reg <= main_preheader_result03;
		if (start == 1'b0 && ^(main_preheader_result03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_result03_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %result.03 = phi i32 [ %result.1., %56 ], [ 0, %.preheader.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__56_20) & (memory_controller_waitrequest == 1'd0)) & (main_56_exitcond == 1'd0))) begin
		main_preheader_result03_reg <= main_preheader_result03;
		if (start == 1'b0 && ^(main_preheader_result03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_result03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %j.02 = phi i32 [ 0, %.preheader ], [ %55, %51 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_51_j02 = 32'd0;
	end
	/* main: %51*/
	/*   %j.02 = phi i32 [ 0, %.preheader ], [ %55, %51 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__51_19) & (memory_controller_waitrequest == 1'd0)) & (main_51_exitcond1_reg == 1'd0))) */ begin
		main_51_j02 = main_51_55_reg;
	end
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %j.02 = phi i32 [ 0, %.preheader ], [ %55, %51 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_51_j02_reg <= main_51_j02;
		if (start == 1'b0 && ^(main_51_j02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_j02_reg"); $finish; end
	end
	/* main: %51*/
	/*   %j.02 = phi i32 [ 0, %.preheader ], [ %55, %51 ]*/
	if ((((cur_state == LEGUP_F_main_BB__51_19) & (memory_controller_waitrequest == 1'd0)) & (main_51_exitcond1_reg == 1'd0))) begin
		main_51_j02_reg <= main_51_j02;
		if (start == 1'b0 && ^(main_51_j02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_j02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %result.11 = phi i32 [ %result.03, %.preheader ], [ %result.1., %51 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_51_result11 = main_preheader_result03_reg;
	end
	/* main: %51*/
	/*   %result.11 = phi i32 [ %result.03, %.preheader ], [ %result.1., %51 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__51_19) & (memory_controller_waitrequest == 1'd0)) & (main_51_exitcond1_reg == 1'd0))) */ begin
		main_51_result11 = main_51_result1;
	end
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %result.11 = phi i32 [ %result.03, %.preheader ], [ %result.1., %51 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_51_result11_reg <= main_51_result11;
		if (start == 1'b0 && ^(main_51_result11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_result11_reg"); $finish; end
	end
	/* main: %51*/
	/*   %result.11 = phi i32 [ %result.03, %.preheader ], [ %result.1., %51 ]*/
	if ((((cur_state == LEGUP_F_main_BB__51_19) & (memory_controller_waitrequest == 1'd0)) & (main_51_exitcond1_reg == 1'd0))) begin
		main_51_result11_reg <= main_51_result11;
		if (start == 1'b0 && ^(main_51_result11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_result11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %scevgep2 = getelementptr [512 x [512 x i8]]* %sobel_output, i32 0, i32 %i.04, i32 %j.02*/
		main_51_scevgep2 = (`TAG_main_0_sobel_output_a + ((512 * main_preheader_i04_reg) + (1 * main_51_j02_reg)));
end
always @(*) begin
	/* main: %51*/
	/*   %scevgep = getelementptr [512 x [512 x i8]]* @elaine_512_golden_output, i32 0, i32 %i.04, i32 %j.02*/
		main_51_scevgep = (`TAG_g_elaine_512_golden_output_a + ((512 * main_preheader_i04_reg) + (1 * main_51_j02_reg)));
end
always @(*) begin
	/* main: %51*/
	/*   %52 = load i8* %scevgep2, align 1, !tbaa !1*/
		main_51_52 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %51*/
	/*   %53 = load i8* %scevgep, align 1, !tbaa !1*/
		main_51_53 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %51*/
	/*   %not. = icmp ne i8 %52, %53*/
		main_51_not = (main_51_52 != main_51_53);
end
always @(*) begin
	/* main: %51*/
	/*   %54 = zext i1 %not. to i32*/
		main_51_54 = main_51_not;
end
always @(*) begin
	/* main: %51*/
	/*   %result.1. = add nsw i32 %54, %result.11*/
		main_51_result1 = (main_51_54 + main_51_result11_reg);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %result.1. = add nsw i32 %54, %result.11*/
	if ((cur_state == LEGUP_F_main_BB__51_19)) begin
		main_51_result1_reg <= main_51_result1;
		if (start == 1'b0 && ^(main_51_result1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_result1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %55 = add nsw i32 %j.02, 1*/
		main_51_55 = (main_51_j02_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %55 = add nsw i32 %j.02, 1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		main_51_55_reg <= main_51_55;
		if (start == 1'b0 && ^(main_51_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %51*/
	/*   %exitcond1 = icmp eq i32 %55, 512*/
		main_51_exitcond1 = (main_51_55 == 32'd512);
end
always @(posedge clk) begin
	/* main: %51*/
	/*   %exitcond1 = icmp eq i32 %55, 512*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		main_51_exitcond1_reg <= main_51_exitcond1;
		if (start == 1'b0 && ^(main_51_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_51_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %57 = add nsw i32 %i.04, 1*/
		main_56_57 = (main_preheader_i04_reg + 32'd1);
end
always @(*) begin
	/* main: %56*/
	/*   %exitcond = icmp eq i32 %57, 512*/
		main_56_exitcond = (main_56_57 == 32'd512);
end
always @(*) begin
	/* main: %58*/
	/*   %59 = icmp eq i32 %result.1., 0*/
		main_58_59 = (main_51_result1_reg == 32'd0);
end
always @(*) begin
	lpm_mult_main_preheaderpreheaderi_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %34 = mul nsw i32 %33, -2*/
	if ((lpm_mult_main_preheaderpreheaderi_34_en == 1'd1)) begin
		main_preheaderpreheaderi_34_stage0_reg <= (main_preheaderpreheaderi_33 * -32'd2);
	end
end
always @(*) begin
	lpm_mult_main_preheaderpreheaderi_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.preheader.preheader.i*/
	/*   %22 = mul nsw i32 %21, -2*/
	if ((lpm_mult_main_preheaderpreheaderi_22_en == 1'd1)) begin
		main_preheaderpreheaderi_22_stage0_reg <= (main_preheaderpreheaderi_21 * -32'd2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %64*/
	/*   ret i32 %result.1.*/
	if ((cur_state == LEGUP_F_main_BB__64_24)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %32 = load i8* %scevgep15, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %12 = load i8* %scevgep21, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %10 = load i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %16 = load i8* %scevgep19, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   store i8 %49, i8* %scevgep7, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %51*/
	/*   %52 = load i8* %scevgep2, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %32 = load i8* %scevgep15, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		memory_controller_address_a = main_preheaderpreheaderi_scevgep15;
	end
	/* main: %.preheader.preheader.i*/
	/*   %12 = load i8* %scevgep21, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_address_a = main_preheaderpreheaderi_scevgep21_reg;
	end
	/* main: %.preheader.preheader.i*/
	/*   %10 = load i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_address_a = main_preheaderpreheaderi_scevgep23_reg;
	end
	/* main: %.preheader.preheader.i*/
	/*   %16 = load i8* %scevgep19, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_address_a = main_preheaderpreheaderi_scevgep19_reg;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   store i8 %49, i8* %scevgep7, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		memory_controller_address_a = main_uslcssa8usi_scevgep7;
	end
	/* main: %51*/
	/*   %52 = load i8* %scevgep2, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_address_a = main_51_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %32 = load i8* %scevgep15, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %12 = load i8* %scevgep21, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %10 = load i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %16 = load i8* %scevgep19, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   store i8 %49, i8* %scevgep7, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %51*/
	/*   %52 = load i8* %scevgep2, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   store i8 %49, i8* %scevgep7, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		memory_controller_in_a = main_uslcssa8usi_49;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %32 = load i8* %scevgep15, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_5)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %12 = load i8* %scevgep21, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %10 = load i8* %scevgep23, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %16 = load i8* %scevgep19, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.us-lcssa8.us.i*/
	/*   store i8 %49, i8* %scevgep7, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_uslcssa8usi_12)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %51*/
	/*   %52 = load i8* %scevgep2, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_size_a = 2'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %20 = load i8* %scevgep11, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %24 = load i8* %scevgep9, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %36 = load i8* %scevgep13, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.preheader.i*/
	/*   %28 = load i8* %scevgep17, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %51*/
	/*   %53 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %20 = load i8* %scevgep11, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_address_b = main_preheaderpreheaderi_scevgep11;
	end
	/* main: %.preheader.preheader.i*/
	/*   %24 = load i8* %scevgep9, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_address_b = main_preheaderpreheaderi_scevgep9_reg;
	end
	/* main: %.preheader.preheader.i*/
	/*   %36 = load i8* %scevgep13, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_address_b = main_preheaderpreheaderi_scevgep13_reg;
	end
	/* main: %.preheader.preheader.i*/
	/*   %28 = load i8* %scevgep17, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		memory_controller_address_b = main_preheaderpreheaderi_scevgep17_reg;
	end
	/* main: %51*/
	/*   %53 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_address_b = main_51_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %20 = load i8* %scevgep11, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %24 = load i8* %scevgep9, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %36 = load i8* %scevgep13, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %28 = load i8* %scevgep17, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %51*/
	/*   %53 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %20 = load i8* %scevgep11, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_6)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %24 = load i8* %scevgep9, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_7)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %36 = load i8* %scevgep13, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_8)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.preheader.preheader.i*/
	/*   %28 = load i8* %scevgep17, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderpreheaderi_9)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %51*/
	/*   %53 = load i8* %scevgep, align 1, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__51_17)) begin
		memory_controller_size_b = 2'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %64*/
	/*   ret i32 %result.1.*/
	if ((cur_state == LEGUP_F_main_BB__64_24)) begin
		return_val <= main_51_result1_reg;
		if (start == 1'b0 && ^(main_51_result1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
